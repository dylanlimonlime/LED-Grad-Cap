# -*- coding: utf-8 -*-
"""imageConverter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pt6X5S7A4IV-pva12m7sytqTKQYt_k1l
"""

import io
import sys
import numpy as np
import string
import PIL

from PIL import Image
from PIL import GifImagePlugin
from matplotlib.pyplot import imshow
from google.colab import drive

drive.mount('/content/gdrive')
np.set_printoptions(threshold=sys.maxsize)

"""B0"""
old_stdout = sys.stdout # Memorize the default stdout stream
sys.stdout = buffer = io.StringIO()

# Call your algorithm function.
# etc...


# path to image in drive
path = "/content/gdrive/My Drive/flipjump.gif"


image = Image.open(path)


format = image.format
frames = image.n_frames if (format == "GIF") else  1
if(format == "GIF"):
  # seeks the i'th frame
  image.seek(0)
image = image.convert("RGBA")
new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
new_image.paste(image, (0, 0), image)              # Paste the image on the background
image = new_image
image = image.convert("RGB")
image = image.resize((32,32), resample= PIL.Image.LANCZOS)


imshow(image)
for i in range(frames):
  # reopens and reformats image, needed for every row in array, idk why
  image = Image.open(path)
  if(format == "GIF"):
    # seeks the i'th frame
    image.seek(i)
  image = image.convert("RGBA")
  new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
  new_image.paste(image, (0, 0), image)              # Paste the image on the background
  image = new_image
  image = image.convert("RGB")

  image = image.resize((32,32))
  image = np.asarray(image, dtype=np.int)

  # extracts channels
  red = image[:, :, :1]
  green = image[:, :, 1:2]
  blue = image[:, :, 2:3]

  # squeezes it so that the last axis goes from 2d with size 1 to 1d
  squeezered   = np.squeeze(red, axis=2)
  squeezegreen = np.squeeze(green, axis=2)
  squeezeblue  = np.squeeze(blue, axis=2)


  # threshholding boolean arrays
  super_red = squeezered <128
  super_green = squeezegreen <128
  super_blue = squeezeblue <128


  # converts below threshold to 0
  squeezered[super_red]=0
  squeezegreen[super_green]=0
  squeezeblue[super_blue]=0


  super_red = squeezered >=128
  super_green = squeezegreen >=128
  super_blue = squeezeblue >=128

  # converts above threshold to 1
  squeezered[super_red]=1
  squeezegreen[super_green]=1
  squeezeblue[super_blue]=1

  # reformats arrays into line
  linered = squeezered.reshape(1024,1)
  linegreen = squeezegreen.reshape(1024,1)
  lineblue = squeezeblue.reshape(1024,1)

  # reverses the arrays in order to feed them last pixel in row first
  reversedred = linered[::-1]
  reversedred = reversedred.reshape(128,8)

  reversedgreen = linegreen[::-1]
  reversedgreen = reversedgreen.reshape(128,8)

  reversedblue = lineblue[::-1]
  reversedblue = reversedblue.reshape(128,8)


  # converts each element to a string
  tsRed = reversedred.astype(str)
  tsGreen = reversedgreen.astype(str)
  tsBlue = reversedblue.astype(str)

  # joins each 8 elements to make a string representing a byte for SPI calls to send
  intRed = [''.join(tsRed[num]) for num in range (128)]
  intGreen = [''.join(tsGreen[num]) for num in range (128)]
  intBlue = [''.join(tsBlue[num]) for num in range (128)]

  # needed for C compiler to understand data is a byte
  append_str = '0b'

  # adds prefix and reshapes it
  resRed = np.array([append_str + sub for sub in intRed]).reshape(1,32,4) 
  resGreen = np.array([append_str + sub for sub in intGreen]).reshape(1,32,4) 
  resBlue = np.array([append_str + sub for sub in intBlue]).reshape(1,32,4) 

  # tester
  one = np.array([1,2,3,4,13,14,15,16]).reshape(1,2,4)
  two = np.array([5,6,7,8,17,18,19,20]).reshape(1,2,4)
  three = np.array([7,8,9,10,21,22,23,24]).reshape(1,2,4)



  # combines the three color arrays (blue needs to be sent first, reverse order) and flattens them
  stacked = np.concatenate((resBlue,resGreen,resRed), axis = 2).flatten()

  # splits arrray into first half and second half since the row and the row+16 need to be sent together for the display
  firstHalf = stacked[:int(stacked.shape[0]/2)]
  secondHalf = stacked[int(stacked.shape[0]/2):]

  # reshapes the array with each row being the 12 bytes needed for a certain rows color (4 bytes per color)
  firstHalf = firstHalf.reshape(int(firstHalf.shape[0]/12),12)
  secondHalf = secondHalf.reshape(int(secondHalf.shape[0]/12),12)

  # combines second half (sent first) and first half, flattens
  res = np.hstack((secondHalf,firstHalf)).flatten()

  # prints result to buffer
  print(list(res))

  """B1"""

  
  image = Image.open(path)

 

  if(format == "GIF"):
    image.seek(i)
  image = image.convert("RGBA")
  new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
  new_image.paste(image, (0, 0), image)              # Paste the image on the background
  image = new_image
  image = image.convert("RGB")

  image = image.resize((32,32))
  image = np.asarray(image, dtype=np.int)



  red = image[:, :, :1]
  green = image[:, :, 1:2]
  blue = image[:, :, 2:3]


  squeezered   = np.squeeze(red, axis=2)
  squeezegreen = np.squeeze(green, axis=2)
  squeezeblue  = np.squeeze(blue, axis=2)


  super_red = squeezered%128 < 64
  super_green = squeezegreen%128 < 64
  super_blue = squeezeblue%128 < 64



  squeezered[super_red]= 0
  squeezegreen[super_green]= 0
  squeezeblue[super_blue]=  0


  super_red = squeezered%128 >=     64
  super_green = squeezegreen%128 >= 64
  super_blue = squeezeblue%128 >=   64

  squeezered[super_red]=1
  squeezegreen[super_green]=1
  squeezeblue[super_blue]=1


  linered = squeezered.reshape(1024,1)
  linegreen = squeezegreen.reshape(1024,1)
  lineblue = squeezeblue.reshape(1024,1)

  reversedred = linered[::-1]
  reversedred = reversedred.reshape(128,8)

  reversedgreen = linegreen[::-1]
  reversedgreen = reversedgreen.reshape(128,8)

  reversedblue = lineblue[::-1]
  reversedblue = reversedblue.reshape(128,8)



  tsRed = reversedred.astype(str)
  tsGreen = reversedgreen.astype(str)
  tsBlue = reversedblue.astype(str)


  intRed = [''.join(tsRed[num]) for num in range (128)]
  intGreen = [''.join(tsGreen[num]) for num in range (128)]
  intBlue = [''.join(tsBlue[num]) for num in range (128)]
  append_str = '0b'


  resRed = np.array([append_str + sub for sub in intRed]).reshape(1,32,4) 
  resGreen = np.array([append_str + sub for sub in intGreen]).reshape(1,32,4) 
  resBlue = np.array([append_str + sub for sub in intBlue]).reshape(1,32,4) 


  one = np.array([1,2,3,4,13,14,15,16]).reshape(1,2,4)
  two = np.array([5,6,7,8,17,18,19,20]).reshape(1,2,4)
  three = np.array([7,8,9,10,21,22,23,24]).reshape(1,2,4)




  stacked = np.concatenate((resBlue,resGreen,resRed), axis = 2).flatten()

  firstHalf = stacked[:int(stacked.shape[0]/2)]
  secondHalf = stacked[int(stacked.shape[0]/2):]
  firstHalf = firstHalf.reshape(int(firstHalf.shape[0]/12),12)
  secondHalf = secondHalf.reshape(int(secondHalf.shape[0]/12),12)


  res = np.hstack((secondHalf,firstHalf)).flatten()

  print(list(res))

  """B2"""
  image = Image.open(path)

  if(format == "GIF"):
    image.seek(i)
  image = image.convert("RGBA")
  new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
  new_image.paste(image, (0, 0), image)              # Paste the image on the background
  image = new_image
  image = image.convert("RGB")

  image = image.resize((32,32))
  image = np.asarray(image, dtype=np.int)



  image = np.asarray(image, dtype=np.int)

  red = image[:, :, :1]
  green = image[:, :, 1:2]
  blue = image[:, :, 2:3]


  squeezered   = np.squeeze(red, axis=2)
  squeezegreen = np.squeeze(green, axis=2)
  squeezeblue  = np.squeeze(blue, axis=2)

  super_red = (squeezered%128)%64 <     32
  super_green = (squeezegreen%128)%64 < 32
  super_blue = (squeezeblue%128)%64 <  32



  squeezered[super_red]= 0
  squeezegreen[super_green]= 0
  squeezeblue[super_blue]=  0


  super_red = (squeezered%128)%64 >=     32
  super_green = (squeezegreen%128)%64 >= 32
  super_blue = (squeezeblue%128)%64 >=  32

  squeezered[super_red]=1
  squeezegreen[super_green]=1
  squeezeblue[super_blue]=1


  linered = squeezered.reshape(1024,1)
  linegreen = squeezegreen.reshape(1024,1)
  lineblue = squeezeblue.reshape(1024,1)

  reversedred = linered[::-1]
  reversedred = reversedred.reshape(128,8)

  reversedgreen = linegreen[::-1]
  reversedgreen = reversedgreen.reshape(128,8)

  reversedblue = lineblue[::-1]
  reversedblue = reversedblue.reshape(128,8)



  tsRed = reversedred.astype(str)
  tsGreen = reversedgreen.astype(str)
  tsBlue = reversedblue.astype(str)


  intRed = [''.join(tsRed[num]) for num in range (128)]
  intGreen = [''.join(tsGreen[num]) for num in range (128)]
  intBlue = [''.join(tsBlue[num]) for num in range (128)]
  append_str = '0b'


  resRed = np.array([append_str + sub for sub in intRed]).reshape(1,32,4) 
  resGreen = np.array([append_str + sub for sub in intGreen]).reshape(1,32,4) 
  resBlue = np.array([append_str + sub for sub in intBlue]).reshape(1,32,4) 


  one = np.array([1,2,3,4,13,14,15,16]).reshape(1,2,4)
  two = np.array([5,6,7,8,17,18,19,20]).reshape(1,2,4)
  three = np.array([7,8,9,10,21,22,23,24]).reshape(1,2,4)




  stacked = np.concatenate((resBlue,resGreen,resRed), axis = 2).flatten()

  firstHalf = stacked[:int(stacked.shape[0]/2)]
  secondHalf = stacked[int(stacked.shape[0]/2):]
  firstHalf = firstHalf.reshape(int(firstHalf.shape[0]/12),12)
  secondHalf = secondHalf.reshape(int(secondHalf.shape[0]/12),12)


  res = np.hstack((secondHalf,firstHalf)).flatten()

  print(list(res))

  """B3"""

  image = Image.open(path)


  if(format == "GIF"):
    image.seek(i)
  image = image.convert("RGBA")
  new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
  new_image.paste(image, (0, 0), image)              # Paste the image on the background
  image = new_image
  image = image.convert("RGB")

  image = image.resize((32,32))

  image = np.asarray(image, dtype=np.int)


  red = image[:, :, :1]
  green = image[:, :, 1:2]
  blue = image[:, :, 2:3]


  squeezered   = np.squeeze(red, axis=2)
  squeezegreen = np.squeeze(green, axis=2)
  squeezeblue  = np.squeeze(blue, axis=2)

  super_red = ((squeezered%128)%64)%32 <     16
  super_green = ((squeezegreen%128)%64)%32 < 16
  super_blue = ((squeezeblue%128)%64)%32 <  16



  squeezered[super_red]= 0
  squeezegreen[super_green]= 0
  squeezeblue[super_blue]=  0


  super_red = ((squeezered%128)%64)%32 >=     16
  super_green = ((squeezegreen%128)%64)%32 >= 16
  super_blue = ((squeezeblue%128)%64)%32 >=  16

  squeezered[super_red]=1
  squeezegreen[super_green]=1
  squeezeblue[super_blue]=1


  linered = squeezered.reshape(1024,1)
  linegreen = squeezegreen.reshape(1024,1)
  lineblue = squeezeblue.reshape(1024,1)

  reversedred = linered[::-1]
  reversedred = reversedred.reshape(128,8)

  reversedgreen = linegreen[::-1]
  reversedgreen = reversedgreen.reshape(128,8)

  reversedblue = lineblue[::-1]
  reversedblue = reversedblue.reshape(128,8)



  tsRed = reversedred.astype(str)
  tsGreen = reversedgreen.astype(str)
  tsBlue = reversedblue.astype(str)


  intRed = [''.join(tsRed[num]) for num in range (128)]
  intGreen = [''.join(tsGreen[num]) for num in range (128)]
  intBlue = [''.join(tsBlue[num]) for num in range (128)]
  append_str = '0b'


  resRed = np.array([append_str + sub for sub in intRed]).reshape(1,32,4) 
  resGreen = np.array([append_str + sub for sub in intGreen]).reshape(1,32,4) 
  resBlue = np.array([append_str + sub for sub in intBlue]).reshape(1,32,4) 


  one = np.array([1,2,3,4,13,14,15,16]).reshape(1,2,4)
  two = np.array([5,6,7,8,17,18,19,20]).reshape(1,2,4)
  three = np.array([7,8,9,10,21,22,23,24]).reshape(1,2,4)




  stacked = np.concatenate((resBlue,resGreen,resRed), axis = 2).flatten()

  firstHalf = stacked[:int(stacked.shape[0]/2)]
  secondHalf = stacked[int(stacked.shape[0]/2):]
  firstHalf = firstHalf.reshape(int(firstHalf.shape[0]/12),12)
  secondHalf = secondHalf.reshape(int(secondHalf.shape[0]/12),12)


  res = np.hstack((secondHalf,firstHalf)).flatten()

  print(list(res))



  """Bmax"""


  # image = Image.open(path)


  # if(format == "GIF"):
  #   image.seek(i)
  # image = image.convert("RGBA")
  # new_image = Image.new("RGBA", image.size, "BLACK") # Create a black rgba background
  # new_image.paste(image, (0, 0), image)              # Paste the image on the background
  # image = new_image
  # image = image.convert("RGB")

  # image = image.resize((32,32))
  # image = np.asarray(image, dtype=np.int)



  # red = image[:, :, :1]
  # green = image[:, :, 1:2]
  # blue = image[:, :, 2:3]

  # squeezered   = np.squeeze(red, axis=2)
  # squeezegreen = np.squeeze(green, axis=2)
  # squeezeblue  = np.squeeze(blue, axis=2)

  # super_red = squeezered != 255
  # super_green = squeezegreen != 255
  # super_blue = squeezeblue != 255




  # squeezered[super_red]= 0
  # squeezegreen[super_green]= 0
  # squeezeblue[super_blue]=  0


  # super_red = squeezered == 255
  # super_green = squeezegreen == 255
  # super_blue = squeezeblue == 255

  # squeezered[super_red]=1
  # squeezegreen[super_green]=1
  # squeezeblue[super_blue]=1


  # linered = squeezered.reshape(1024,1)
  # linegreen = squeezegreen.reshape(1024,1)
  # lineblue = squeezeblue.reshape(1024,1)

  # reversedred = linered[::-1]
  # reversedred = reversedred.reshape(128,8)

  # reversedgreen = linegreen[::-1]
  # reversedgreen = reversedgreen.reshape(128,8)

  # reversedblue = lineblue[::-1]
  # reversedblue = reversedblue.reshape(128,8)



  # tsRed = reversedred.astype(str)
  # tsGreen = reversedgreen.astype(str)
  # tsBlue = reversedblue.astype(str)


  # intRed = [''.join(tsRed[num]) for num in range (128)]
  # intGreen = [''.join(tsGreen[num]) for num in range (128)]
  # intBlue = [''.join(tsBlue[num]) for num in range (128)]
  # append_str = '0b'


  # resRed = np.array([append_str + sub for sub in intRed]).reshape(1,32,4) 
  # resGreen = np.array([append_str + sub for sub in intGreen]).reshape(1,32,4) 
  # resBlue = np.array([append_str + sub for sub in intBlue]).reshape(1,32,4) 


  # one = np.array([1,2,3,4,13,14,15,16]).reshape(1,2,4)
  # two = np.array([5,6,7,8,17,18,19,20]).reshape(1,2,4)
  # three = np.array([7,8,9,10,21,22,23,24]).reshape(1,2,4)




  # stacked = np.concatenate((resBlue,resGreen,resRed), axis = 2).flatten()

  # firstHalf = stacked[:int(stacked.shape[0]/2)]
  # secondHalf = stacked[int(stacked.shape[0]/2):]
  # firstHalf = firstHalf.reshape(int(firstHalf.shape[0]/12),12)
  # secondHalf = secondHalf.reshape(int(secondHalf.shape[0]/12),12)


  # res = np.hstack((secondHalf,firstHalf)).flatten()

  # print(list(res))
# reset stdout so that the full array can be manipulated to the code needed for the stm 32 IDE in C
sys.stdout = old_stdout # Put the old stream back in place

whatWasPrinted = buffer.getvalue() # Return a str containing the entire contents of the buffer.


# replace list delimiters with C syntax
whatWasPrinted = whatWasPrinted.replace("[", "{")
whatWasPrinted = whatWasPrinted.replace("]", "},")
whatWasPrinted = whatWasPrinted.replace("\'", "")

# more syntax
pre = "const uint8_t image [4*"+ str(frames)+ "][128*3] = { \n"
suf = "};"
print(pre,whatWasPrinted,suf, sep='')
result = pre + whatWasPrinted + suf

