
GradCap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00054724  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08059bf8  08059bf8  00069bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08059c00  08059c00  00069c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08059c04  08059c04  00069c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08059c08  00070004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  20000010  08059c14  00070010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000458  08059c14  00070458  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00070010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001382e  00000000  00000000  00070040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a4c  00000000  00000000  0008386e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b8  00000000  00000000  000862c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001590  00000000  00000000  00087978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002176f  00000000  00000000  00088f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c4f  00000000  00000000  000aa677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d60a1  00000000  00000000  000bd2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00193367  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fd8  00000000  00000000  001933bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080054bc 	.word	0x080054bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080054bc 	.word	0x080054bc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000484:	f023 0218 	bic.w	r2, r3, #24
 8000488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4313      	orrs	r3, r2
 8000490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c4:	68fb      	ldr	r3, [r7, #12]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fe53 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f969 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fb2d 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 faf9 	bl	8000b0c <MX_DMA_Init>
  MX_SPI1_Init();
 800051a:	f000 fa07 	bl	800092c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800051e:	f000 fa81 	bl	8000a24 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000522:	f000 facb 	bl	8000abc <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000526:	f000 fa3f 	bl	80009a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //OE high
  GPIOA -> ODR |= GPIO_PIN_8;
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000538:	6153      	str	r3, [r2, #20]

  int scan = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  int count = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  int frame = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]

  int im =0;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  int rep = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
     {
    	if(im==numImage){
 800054e:	2206      	movs	r2, #6
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <main+0x56>
    		im =0;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
    	}
    	if(rep == repeat[im]){
 800055a:	4a9a      	ldr	r2, [pc, #616]	; (80007c4 <main+0x2c0>)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d104      	bne.n	8000572 <main+0x6e>
    		im++;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	3301      	adds	r3, #1
 800056c:	60bb      	str	r3, [r7, #8]
    		rep=0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
    	}
    	// subframe finished, move onto next line
    	if(count >=15){
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	2b0e      	cmp	r3, #14
 8000576:	dd04      	ble.n	8000582 <main+0x7e>
			scan++;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
			count = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
		}
    	// finished with animation, loop back
		if(frame>=framesN[im]*frameMod[im]){
 8000582:	4a91      	ldr	r2, [pc, #580]	; (80007c8 <main+0x2c4>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058a:	4990      	ldr	r1, [pc, #576]	; (80007cc <main+0x2c8>)
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	db04      	blt.n	80005a6 <main+0xa2>
			frame = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
			rep++;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
		}

		// last row, change frame and loop back
		if(scan>=16){
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	dd04      	ble.n	80005b6 <main+0xb2>
			scan = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
			frame ++;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
		}

		// new row, set row selects
		if(count==0){
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d147      	bne.n	800064c <main+0x148>
			if(scan & 0x1){
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <main+0xd0>
				GPIOB -> ODR  |= GPIO_PIN_0;
 80005c6:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <main+0x2cc>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a81      	ldr	r2, [pc, #516]	; (80007d0 <main+0x2cc>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	e005      	b.n	80005e0 <main+0xdc>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_0;
 80005d4:	4b7e      	ldr	r3, [pc, #504]	; (80007d0 <main+0x2cc>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a7d      	ldr	r2, [pc, #500]	; (80007d0 <main+0x2cc>)
 80005da:	f023 0301 	bic.w	r3, r3, #1
 80005de:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x2){
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <main+0xf4>
				GPIOB -> ODR  |= GPIO_PIN_1;
 80005ea:	4b79      	ldr	r3, [pc, #484]	; (80007d0 <main+0x2cc>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a78      	ldr	r2, [pc, #480]	; (80007d0 <main+0x2cc>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	e005      	b.n	8000604 <main+0x100>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_1;
 80005f8:	4b75      	ldr	r3, [pc, #468]	; (80007d0 <main+0x2cc>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a74      	ldr	r2, [pc, #464]	; (80007d0 <main+0x2cc>)
 80005fe:	f023 0302 	bic.w	r3, r3, #2
 8000602:	6153      	str	r3, [r2, #20]
			}

			if(scan & 0x4){
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <main+0x118>
				GPIOD -> ODR  |= GPIO_PIN_1;
 800060e:	4b71      	ldr	r3, [pc, #452]	; (80007d4 <main+0x2d0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a70      	ldr	r2, [pc, #448]	; (80007d4 <main+0x2d0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	e005      	b.n	8000628 <main+0x124>
			}
			else{
				GPIOD -> ODR  &=~ GPIO_PIN_1;
 800061c:	4b6d      	ldr	r3, [pc, #436]	; (80007d4 <main+0x2d0>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a6c      	ldr	r2, [pc, #432]	; (80007d4 <main+0x2d0>)
 8000622:	f023 0302 	bic.w	r3, r3, #2
 8000626:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x8){
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <main+0x13c>
				GPIOB -> ODR  |= GPIO_PIN_14;
 8000632:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <main+0x2cc>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a66      	ldr	r2, [pc, #408]	; (80007d0 <main+0x2cc>)
 8000638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	e005      	b.n	800064c <main+0x148>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_14;
 8000640:	4b63      	ldr	r3, [pc, #396]	; (80007d0 <main+0x2cc>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a62      	ldr	r2, [pc, #392]	; (80007d0 <main+0x2cc>)
 8000646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800064a:	6153      	str	r3, [r2, #20]
			}
		}

		// OE high (LEDs off)
		GPIOA -> ODR |= GPIO_PIN_8;
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065a:	6153      	str	r3, [r2, #20]

		// latch low (load on)
		GPIOC -> ODR &= ~GPIO_PIN_13;
 800065c:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <main+0x2d4>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a5d      	ldr	r2, [pc, #372]	; (80007d8 <main+0x2d4>)
 8000662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000666:	6153      	str	r3, [r2, #20]


		// brightness modulation
		if(count>=7){
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	2b06      	cmp	r3, #6
 800066c:	dd20      	ble.n	80006b0 <main+0x1ac>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][0+(frame/frameMod[im])*4][scan*4*3*2]), 24, 100);
 800066e:	4a57      	ldr	r2, [pc, #348]	; (80007cc <main+0x2c8>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	fb92 f3f3 	sdiv	r3, r2, r3
 800067c:	009a      	lsls	r2, r3, #2
 800067e:	6979      	ldr	r1, [r7, #20]
 8000680:	460b      	mov	r3, r1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	440b      	add	r3, r1
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4618      	mov	r0, r3
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	01db      	lsls	r3, r3, #7
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000698:	fb01 f202 	mul.w	r2, r1, r2
 800069c:	4413      	add	r3, r2
 800069e:	4403      	add	r3, r0
 80006a0:	4a4e      	ldr	r2, [pc, #312]	; (80007dc <main+0x2d8>)
 80006a2:	1899      	adds	r1, r3, r2
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2218      	movs	r2, #24
 80006a8:	484d      	ldr	r0, [pc, #308]	; (80007e0 <main+0x2dc>)
 80006aa:	f003 f8d6 	bl	800385a <HAL_SPI_Transmit>
 80006ae:	e06d      	b.n	800078c <main+0x288>
		}
		else if(count>=3){
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	dd21      	ble.n	80006fa <main+0x1f6>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][1+(frame/frameMod[im])*4][scan*4*3*2]), 24, 100);
 80006b6:	4a45      	ldr	r2, [pc, #276]	; (80007cc <main+0x2c8>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	6979      	ldr	r1, [r7, #20]
 80006ca:	460b      	mov	r3, r1
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	440b      	add	r3, r1
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	01db      	lsls	r3, r3, #7
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	4413      	add	r3, r2
 80006e8:	4403      	add	r3, r0
 80006ea:	4a3c      	ldr	r2, [pc, #240]	; (80007dc <main+0x2d8>)
 80006ec:	1899      	adds	r1, r3, r2
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	2218      	movs	r2, #24
 80006f2:	483b      	ldr	r0, [pc, #236]	; (80007e0 <main+0x2dc>)
 80006f4:	f003 f8b1 	bl	800385a <HAL_SPI_Transmit>
 80006f8:	e048      	b.n	800078c <main+0x288>
		}
		else if(count>=1){
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dd21      	ble.n	8000744 <main+0x240>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][2+(frame/frameMod[im])*4][scan*4*3*2]), 24, 100);
 8000700:	4a32      	ldr	r2, [pc, #200]	; (80007cc <main+0x2c8>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	fb92 f3f3 	sdiv	r3, r2, r3
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	1c9a      	adds	r2, r3, #2
 8000712:	6979      	ldr	r1, [r7, #20]
 8000714:	460b      	mov	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	440b      	add	r3, r1
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4618      	mov	r0, r3
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	01db      	lsls	r3, r3, #7
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800072c:	fb01 f202 	mul.w	r2, r1, r2
 8000730:	4413      	add	r3, r2
 8000732:	4403      	add	r3, r0
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <main+0x2d8>)
 8000736:	1899      	adds	r1, r3, r2
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2218      	movs	r2, #24
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <main+0x2dc>)
 800073e:	f003 f88c 	bl	800385a <HAL_SPI_Transmit>
 8000742:	e023      	b.n	800078c <main+0x288>
		}
		else if(count>=0){
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db20      	blt.n	800078c <main+0x288>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][3+(frame/frameMod[im])*4][scan*4*3*2]), 24, 100);
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <main+0x2c8>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	fb92 f3f3 	sdiv	r3, r2, r3
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	1cda      	adds	r2, r3, #3
 800075c:	6979      	ldr	r1, [r7, #20]
 800075e:	460b      	mov	r3, r1
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	440b      	add	r3, r1
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	4618      	mov	r0, r3
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000776:	fb01 f202 	mul.w	r2, r1, r2
 800077a:	4413      	add	r3, r2
 800077c:	4403      	add	r3, r0
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <main+0x2d8>)
 8000780:	1899      	adds	r1, r3, r2
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	2218      	movs	r2, #24
 8000786:	4816      	ldr	r0, [pc, #88]	; (80007e0 <main+0x2dc>)
 8000788:	f003 f867 	bl	800385a <HAL_SPI_Transmit>
		}


		// OE low (LEDs on)
		GPIOA -> ODR &= ~GPIO_PIN_8;
 800078c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800079a:	6153      	str	r3, [r2, #20]

		// LAT high (load off)
		GPIOC -> ODR |= GPIO_PIN_13;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <main+0x2d4>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <main+0x2d4>)
 80007a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007a6:	6153      	str	r3, [r2, #20]

		// delay so leds are on for certain time
		for(int i = 0; i<40; i++){}
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	e002      	b.n	80007b4 <main+0x2b0>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b27      	cmp	r3, #39	; 0x27
 80007b8:	ddf9      	ble.n	80007ae <main+0x2aa>

		// increase count
		count++;
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	3301      	adds	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
    	if(im==numImage){
 80007c0:	e6c5      	b.n	800054e <main+0x4a>
 80007c2:	bf00      	nop
 80007c4:	08005540 	.word	0x08005540
 80007c8:	08005510 	.word	0x08005510
 80007cc:	08005528 	.word	0x08005528
 80007d0:	48000400 	.word	0x48000400
 80007d4:	48000c00 	.word	0x48000c00
 80007d8:	48000800 	.word	0x48000800
 80007dc:	08005558 	.word	0x08005558
 80007e0:	2000017c 	.word	0x2000017c

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ae      	sub	sp, #184	; 0xb8
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ee:	2248      	movs	r2, #72	; 0x48
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fe5a 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2250      	movs	r2, #80	; 0x50
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fe4a 	bl	80054ac <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000826:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	f023 0303 	bic.w	r3, r3, #3
 8000832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fe19 	bl	8000474 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <SystemClock_Config+0x144>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800084a:	4a37      	ldr	r2, [pc, #220]	; (8000928 <SystemClock_Config+0x144>)
 800084c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <SystemClock_Config+0x144>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800085e:	2327      	movs	r3, #39	; 0x27
 8000860:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000870:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fd1f 	bl	80022d8 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008a0:	f000 f9fa 	bl	8000c98 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008a4:	236f      	movs	r3, #111	; 0x6f
 80008a6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008a8:	2302      	movs	r3, #2
 80008aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f864 	bl	8002994 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008d2:	f000 f9e1 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80008d6:	f242 1301 	movw	r3, #8449	; 0x2101
 80008da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80008dc:	2318      	movs	r3, #24
 80008de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80008e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80008ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80008f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000902:	2300      	movs	r3, #0
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000906:	2310      	movs	r3, #16
 8000908:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fc8d 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000918:	f000 f9be 	bl	8000c98 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800091c:	f002 fdfc 	bl	8003518 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000920:	bf00      	nop
 8000922:	37b8      	adds	r7, #184	; 0xb8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58000400 	.word	0x58000400

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <MX_SPI1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000946:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800094a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_SPI1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_SPI1_Init+0x74>)
 800095a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_SPI1_Init+0x74>)
 800097a:	2207      	movs	r2, #7
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_SPI1_Init+0x74>)
 8000986:	2208      	movs	r2, #8
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_SPI1_Init+0x74>)
 800098c:	f002 fedb 	bl	8003746 <HAL_SPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f97f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000017c 	.word	0x2000017c
 80009a4:	40013000 	.word	0x40013000

080009a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_SPI2_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_SPI2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI2_Init+0x74>)
 8000a02:	2208      	movs	r2, #8
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_SPI2_Init+0x74>)
 8000a08:	f002 fe9d 	bl	8003746 <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f941 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000002c 	.word	0x2000002c
 8000a20:	40003800 	.word	0x40003800

08000a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART1_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f003 f997 	bl	8003da0 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f90e 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a80:	f004 fbb1 	bl	80051e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f905 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f004 fbe6 	bl	8005262 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f8fc 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fb67 	bl	8005174 <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f8f4 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <MX_USB_PCD_Init+0x4c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000af2:	f000 ff59 	bl	80019a8 <HAL_PCD_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000afc:	f000 f8cc 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001e0 	.word	0x200001e0
 8000b08:	40006800 	.word	0x40006800

08000b0c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b10:	2004      	movs	r0, #4
 8000b12:	f7ff fcc5 	bl	80004a0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fcc2 	bl	80004a0 <LL_AHB1_GRP1_EnableClock>

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_DMA_Init+0x60>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_DMA_Init+0x5c>)
 8000b56:	f000 fc95 	bl	8001484 <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DMA_Init+0x58>
  {
    Error_Handler( );
 8000b60:	f000 f89a 	bl	8000c98 <Error_Handler>
  }

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000011c 	.word	0x2000011c
 8000b6c:	40020008 	.word	0x40020008

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2004      	movs	r0, #4
 8000b86:	f7ff fca4 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fca1 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	2002      	movs	r0, #2
 8000b92:	f7ff fc9e 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2008      	movs	r0, #8
 8000b98:	f7ff fc9b 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAT_GPIO_Port, LAT_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	483a      	ldr	r0, [pc, #232]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000ba4:	f000 fee8 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fee1 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RowA_Pin|RowB_Pin|RowD_Pin|RowC_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f244 0123 	movw	r1, #16419	; 0x4023
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x120>)
 8000bbe:	f000 fedb 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RowC_1_GPIO_Port, RowC_1_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4833      	ldr	r0, [pc, #204]	; (8000c94 <MX_GPIO_Init+0x124>)
 8000bc8:	f000 fed6 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LAT_Pin */
  GPIO_InitStruct.Pin = LAT_Pin;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LAT_GPIO_Port, &GPIO_InitStruct);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	482a      	ldr	r0, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000be4:	f000 fd58 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fd49 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c06:	2310      	movs	r3, #16
 8000c08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	481d      	ldr	r0, [pc, #116]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000c18:	f000 fd3e 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RowA_Pin RowB_Pin RowC_Pin */
  GPIO_InitStruct.Pin = RowA_Pin|RowB_Pin|RowC_Pin;
 8000c1c:	2323      	movs	r3, #35	; 0x23
 8000c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <MX_GPIO_Init+0x120>)
 8000c32:	f000 fd31 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : RowD_Pin */
  GPIO_InitStruct.Pin = RowD_Pin;
 8000c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c40:	2302      	movs	r3, #2
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowD_GPIO_Port, &GPIO_InitStruct);
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4810      	ldr	r0, [pc, #64]	; (8000c90 <MX_GPIO_Init+0x120>)
 8000c4e:	f000 fd23 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c52:	2301      	movs	r3, #1
 8000c54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_GPIO_Init+0x124>)
 8000c64:	f000 fd18 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : RowC_1_Pin */
  GPIO_InitStruct.Pin = RowC_1_Pin;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowC_1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_GPIO_Init+0x124>)
 8000c7e:	f000 fd0b 	bl	8001698 <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000c00 	.word	0x48000c00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_AHB2_GRP1_EnableClock>:
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a30      	ldr	r2, [pc, #192]	; (8000e2c <HAL_SPI_MspInit+0xe0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d118      	bne.n	8000da0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d72:	f7ff ffca 	bl	8000d0a <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff ff95 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c2      	movs	r3, #194	; 0xc2
 8000d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fc7d 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d9e:	e040      	b.n	8000e22 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_SPI_MspInit+0xe4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d13b      	bne.n	8000e22 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000daa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dae:	f7ff ff93 	bl	8000cd8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2004      	movs	r0, #4
 8000db4:	f7ff ff77 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff74 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <HAL_SPI_MspInit+0xe8>)
 8000dda:	f000 fc5d 	bl	8001698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dee:	2305      	movs	r3, #5
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <HAL_SPI_MspInit+0xe8>)
 8000dfa:	f000 fc4d 	bl	8001698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e10:	2305      	movs	r3, #5
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f000 fc3b 	bl	8001698 <HAL_GPIO_Init>
}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40013000 	.word	0x40013000
 8000e30:	40003800 	.word	0x40003800
 8000e34:	48000800 	.word	0x48000800

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_UART_MspInit+0x58>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d116      	bne.n	8000e88 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e5e:	f7ff ff54 	bl	8000d0a <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff ff1f 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e68:	23c0      	movs	r3, #192	; 0xc0
 8000e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <HAL_UART_MspInit+0x5c>)
 8000e84:	f000 fc08 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	48000400 	.word	0x48000400

08000e98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_PCD_MspInit+0x5c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d118      	bne.n	8000eec <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff fef3 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ec0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f000 fbda 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ee4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ee8:	f7ff fef6 	bl	8000cd8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40006800 	.word	0x40006800

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f98c 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <SystemInit+0xa0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemInit+0xa0>)
 8000f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <SystemInit+0xa0>)
 8000f66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f86:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <SystemInit+0xa4>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa4:	f023 0305 	bic.w	r3, r3, #5
 8000fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <SystemInit+0xa8>)
 8000fc6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <SystemInit+0xa8>)
 8000fce:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	faf6fefb 	.word	0xfaf6fefb
 8000ffc:	22041000 	.word	0x22041000

08001000 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	4a47      	ldr	r2, [pc, #284]	; (8001130 <SystemCoreClockUpdate+0x130>)
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b0c      	cmp	r3, #12
 8001026:	d867      	bhi.n	80010f8 <SystemCoreClockUpdate+0xf8>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <SystemCoreClockUpdate+0x30>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001065 	.word	0x08001065
 8001034:	080010f9 	.word	0x080010f9
 8001038:	080010f9 	.word	0x080010f9
 800103c:	080010f9 	.word	0x080010f9
 8001040:	0800106d 	.word	0x0800106d
 8001044:	080010f9 	.word	0x080010f9
 8001048:	080010f9 	.word	0x080010f9
 800104c:	080010f9 	.word	0x080010f9
 8001050:	08001075 	.word	0x08001075
 8001054:	080010f9 	.word	0x080010f9
 8001058:	080010f9 	.word	0x080010f9
 800105c:	080010f9 	.word	0x080010f9
 8001060:	0800107d 	.word	0x0800107d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001064:	4a33      	ldr	r2, [pc, #204]	; (8001134 <SystemCoreClockUpdate+0x134>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6013      	str	r3, [r2, #0]
      break;
 800106a:	e049      	b.n	8001100 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <SystemCoreClockUpdate+0x134>)
 800106e:	4a32      	ldr	r2, [pc, #200]	; (8001138 <SystemCoreClockUpdate+0x138>)
 8001070:	601a      	str	r2, [r3, #0]
      break;
 8001072:	e045      	b.n	8001100 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <SystemCoreClockUpdate+0x134>)
 8001076:	4a31      	ldr	r2, [pc, #196]	; (800113c <SystemCoreClockUpdate+0x13c>)
 8001078:	601a      	str	r2, [r3, #0]
      break;
 800107a:	e041      	b.n	8001100 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	3301      	adds	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d105      	bne.n	80010aa <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800109e:	4a26      	ldr	r2, [pc, #152]	; (8001138 <SystemCoreClockUpdate+0x138>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00d      	b.n	80010c6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d105      	bne.n	80010bc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SystemCoreClockUpdate+0x13c>)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e004      	b.n	80010c6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0f5b      	lsrs	r3, r3, #29
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	3301      	adds	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <SystemCoreClockUpdate+0x134>)
 80010f4:	6013      	str	r3, [r2, #0]
      break;
 80010f6:	e003      	b.n	8001100 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <SystemCoreClockUpdate+0x134>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	6013      	str	r3, [r2, #0]
      break;
 80010fe:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <SystemCoreClockUpdate+0x140>)
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <SystemCoreClockUpdate+0x134>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemCoreClockUpdate+0x134>)
 8001120:	6013      	str	r3, [r2, #0]

}
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	08059bb8 	.word	0x08059bb8
 8001134:	20000004 	.word	0x20000004
 8001138:	00f42400 	.word	0x00f42400
 800113c:	01e84800 	.word	0x01e84800
 8001140:	08059b58 	.word	0x08059b58

08001144 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001144:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001146:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001148:	3304      	adds	r3, #4

0800114a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800114e:	d3f9      	bcc.n	8001144 <CopyDataInit>
  bx lr
 8001150:	4770      	bx	lr

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001152:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001154:	3004      	adds	r0, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001156:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  bx lr
 800115a:	4770      	bx	lr

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopForever+0x8>)
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <LoopForever+0xc>)
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <LoopForever+0x10>)
 8001166:	2300      	movs	r3, #0
 8001168:	f7ff ffef 	bl	800114a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopForever+0x14>)
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopForever+0x18>)
 8001170:	2300      	movs	r3, #0
 8001172:	f7ff fff0 	bl	8001156 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopForever+0x1c>)
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <LoopForever+0x20>)
 800117a:	2300      	movs	r3, #0
 800117c:	f7ff ffeb 	bl	8001156 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001180:	f7ff fee8 	bl	8000f54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001184:	f004 f96e 	bl	8005464 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001188:	f7ff f9bc 	bl	8000504 <main>

0800118c <LoopForever>:

LoopForever:
  b LoopForever
 800118c:	e7fe      	b.n	800118c <LoopForever>
 800118e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001190:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001194:	20000004 	.word	0x20000004
 8001198:	20000010 	.word	0x20000010
 800119c:	08059c08 	.word	0x08059c08
  INIT_BSS _sbss, _ebss
 80011a0:	20000010 	.word	0x20000010
 80011a4:	20000458 	.word	0x20000458
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80011a8:	20030000 	.word	0x20030000
 80011ac:	20030000 	.word	0x20030000

080011b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_Init+0x3c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x3c>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f928 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f80f 	bl	80011f4 <HAL_InitTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	e001      	b.n	80011e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e2:	f7ff fdab 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58004000 	.word	0x58004000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_InitTick+0x6c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001208:	f001 fd6c 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_InitTick+0x6c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001216:	fbb1 f3f3 	udiv	r3, r1, r3
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f923 	bl	800146a <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d809      	bhi.n	8001244 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f8fd 	bl	8001436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_InitTick+0x70>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e007      	b.n	8001254 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e004      	b.n	8001254 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e001      	b.n	8001254 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000000c 	.word	0x2000000c
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x1c>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000454 	.word	0x20000454
 8001288:	2000000c 	.word	0x2000000c

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000454 	.word	0x20000454

080012a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTickPrio+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb2 	bl	80013dc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e08d      	b.n	80015b2 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_DMA_Init+0x138>)
 800149e:	429a      	cmp	r2, r3
 80014a0:	d80f      	bhi.n	80014c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_DMA_Init+0x13c>)
 80014aa:	4413      	add	r3, r2
 80014ac:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <HAL_DMA_Init+0x140>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	009a      	lsls	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a42      	ldr	r2, [pc, #264]	; (80015c8 <HAL_DMA_Init+0x144>)
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
 80014c0:	e00e      	b.n	80014e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <HAL_DMA_Init+0x148>)
 80014ca:	4413      	add	r3, r2
 80014cc:	4a3d      	ldr	r2, [pc, #244]	; (80015c4 <HAL_DMA_Init+0x140>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	009a      	lsls	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <HAL_DMA_Init+0x14c>)
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f84e 	bl	80015d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001540:	d102      	bne.n	8001548 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800155c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d010      	beq.n	8001588 <HAL_DMA_Init+0x104>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d80c      	bhi.n	8001588 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f86e 	bl	8001650 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e008      	b.n	800159a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020407 	.word	0x40020407
 80015c0:	bffdfff8 	.word	0xbffdfff8
 80015c4:	cccccccd 	.word	0xcccccccd
 80015c8:	40020000 	.word	0x40020000
 80015cc:	bffdfbf8 	.word	0xbffdfbf8
 80015d0:	40020400 	.word	0x40020400

080015d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d80a      	bhi.n	80015fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6493      	str	r3, [r2, #72]	; 0x48
 80015fc:	e007      	b.n	800160e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001608:	4413      	add	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	3b08      	subs	r3, #8
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001624:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 031c 	and.w	r3, r3, #28
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40020407 	.word	0x40020407
 8001644:	4002081c 	.word	0x4002081c
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	40020880 	.word	0x40020880

08001650 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a08      	ldr	r2, [pc, #32]	; (8001694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3b01      	subs	r3, #1
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	1000823f 	.word	0x1000823f
 8001694:	40020940 	.word	0x40020940

08001698 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e14c      	b.n	8001942 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 813e 	beq.w	800193c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x38>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b12      	cmp	r3, #18
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	6939      	ldr	r1, [r7, #16]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d00b      	beq.n	800176c <HAL_GPIO_Init+0xd4>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001760:	2b11      	cmp	r3, #17
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d130      	bne.n	80017ce <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a2:	2201      	movs	r2, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0201 	and.w	r2, r3, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8098 	beq.w	800193c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x2c8>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001836:	d019      	beq.n	800186c <HAL_GPIO_Init+0x1d4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1d0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1cc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_GPIO_Init+0x2d4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1c8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1c4>
 8001858:	2304      	movs	r3, #4
 800185a:	e008      	b.n	800186e <HAL_GPIO_Init+0x1d6>
 800185c:	2307      	movs	r3, #7
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1d6>
 8001860:	2303      	movs	r3, #3
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1d6>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1d6>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1d6>
 800186c:	2300      	movs	r3, #0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <HAL_GPIO_Init+0x2c8>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 80018bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f aeab 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	48000c00 	.word	0x48000c00
 8001970:	48001000 	.word	0x48001000
 8001974:	58000800 	.word	0x58000800

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001994:	e002      	b.n	800199c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af06      	add	r7, sp, #24
 80019ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0ad      	b.n	8001b16 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fa62 	bl	8000e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fcfd 	bl	80053e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e035      	b.n	8001a58 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	4413      	add	r3, r2
 80019f4:	3329      	adds	r3, #41	; 0x29
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	4413      	add	r3, r2
 8001a02:	3328      	adds	r3, #40	; 0x28
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	b291      	uxth	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	4413      	add	r3, r2
 8001a14:	3336      	adds	r3, #54	; 0x36
 8001a16:	460a      	mov	r2, r1
 8001a18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	4413      	add	r3, r2
 8001a22:	332b      	adds	r3, #43	; 0x2b
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	4413      	add	r3, r2
 8001a30:	3338      	adds	r3, #56	; 0x38
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	4413      	add	r3, r2
 8001a3e:	333c      	adds	r3, #60	; 0x3c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	4413      	add	r3, r2
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3c4      	bcc.n	80019ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e031      	b.n	8001acc <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	015b      	lsls	r3, r3, #5
 8001a6e:	4413      	add	r3, r2
 8001a70:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	015b      	lsls	r3, r3, #5
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	4413      	add	r3, r2
 8001a90:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	015b      	lsls	r3, r3, #5
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	330a      	adds	r3, #10
 8001abe:	015b      	lsls	r3, r3, #5
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3c8      	bcc.n	8001a68 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	687e      	ldr	r6, [r7, #4]
 8001ade:	466d      	mov	r5, sp
 8001ae0:	f106 0410 	add.w	r4, r6, #16
 8001ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	602b      	str	r3, [r5, #0]
 8001aec:	1d33      	adds	r3, r6, #4
 8001aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f003 fc92 	bl	800541a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f805 	bl	8001b1e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b1e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	58000400 	.word	0x58000400

08001b94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_PWREx_GetVoltageRange+0x18>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	58000400 	.word	0x58000400

08001bb0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bc2:	d101      	bne.n	8001bc8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_HSE_EnableBypass>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_HSE_DisableBypass>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_HSE_Enable>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_RCC_HSE_Disable>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_RCC_HSE_IsReady>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c5e:	d101      	bne.n	8001c64 <LL_RCC_HSE_IsReady+0x18>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <LL_RCC_HSE_IsReady+0x1a>
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_HSI_Enable>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_HSI_Disable>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_HSI_IsReady>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d101      	bne.n	8001cc4 <LL_RCC_HSI_IsReady+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_RCC_HSI_IsReady+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_RCC_HSI48_Enable>:
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_RCC_HSI48_Disable>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_HSI48_IsReady>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d101      	bne.n	8001d56 <LL_RCC_HSI48_IsReady+0x18>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_RCC_HSI48_IsReady+0x1a>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_LSE_Enable>:
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_LSE_Disable>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_LSE_EnableBypass>:
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_RCC_LSE_DisableBypass>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d101      	bne.n	8001e02 <LL_RCC_LSE_IsReady+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_RCC_LSE_IsReady+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d101      	bne.n	8001e6a <LL_RCC_LSI1_IsReady+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_RCC_LSI1_IsReady+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d101      	bne.n	8001ed2 <LL_RCC_LSI2_IsReady+0x18>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_RCC_LSI2_IsReady+0x1a>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6013      	str	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d101      	bne.n	8001f5e <LL_RCC_MSI_IsReady+0x16>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_RCC_MSI_IsReady+0x18>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2bb0      	cmp	r3, #176	; 0xb0
 8001fa8:	d901      	bls.n	8001fae <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001faa:	23b0      	movs	r3, #176	; 0xb0
 8001fac:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 0203 	bic.w	r2, r3, #3
 8001ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800205e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021aa:	d101      	bne.n	80021b0 <LL_RCC_PLL_IsReady+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_RCC_PLL_IsReady+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d101      	bne.n	8002236 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002256:	d101      	bne.n	800225c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d101      	bne.n	8002282 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a0:	d101      	bne.n	80022a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022c4:	d101      	bne.n	80022ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08b      	sub	sp, #44	; 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e34b      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808f 	beq.w	8002416 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f8:	f7ff fe89 	bl	800200e <LL_RCC_GetSysClkSource>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fe:	f7ff ff82 	bl	8002206 <LL_RCC_PLL_GetMainSource>
 8002302:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x3e>
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d149      	bne.n	80023a4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d146      	bne.n	80023a4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002316:	f7ff fe17 	bl	8001f48 <LL_RCC_MSI_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x54>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e32a      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002330:	f7ff fe2f 	bl	8001f92 <LL_RCC_MSI_GetRange>
 8002334:	4603      	mov	r3, r0
 8002336:	429c      	cmp	r4, r3
 8002338:	d914      	bls.n	8002364 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fd10 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e319      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe09 	bl	8001f6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe2d 	bl	8001fbc <LL_RCC_MSI_SetCalibTrimming>
 8002362:	e013      	b.n	800238c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fdfe 	bl	8001f6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe22 	bl	8001fbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fcf1 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e2fa      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800238c:	f7fe fe38 	bl	8001000 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002390:	4bb4      	ldr	r3, [pc, #720]	; (8002664 <HAL_RCC_OscConfig+0x38c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe ff2d 	bl	80011f4 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d039      	beq.n	8002414 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e2ee      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01e      	beq.n	80023ea <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ac:	f7ff fdae 	bl	8001f0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff6c 	bl	800128c <HAL_GetTick>
 80023b4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b8:	f7fe ff68 	bl	800128c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2db      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ca:	f7ff fdbd 	bl	8001f48 <LL_RCC_MSI_IsReady>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f1      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fdc6 	bl	8001f6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fdea 	bl	8001fbc <LL_RCC_MSI_SetCalibTrimming>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ea:	f7ff fd9e 	bl	8001f2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff4d 	bl	800128c <HAL_GetTick>
 80023f2:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f6:	f7fe ff49 	bl	800128c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e2bc      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002408:	f7ff fd9e 	bl	8001f48 <LL_RCC_MSI_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f1      	bne.n	80023f6 <HAL_RCC_OscConfig+0x11e>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d05a      	beq.n	80024d8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002422:	f7ff fdf4 	bl	800200e <LL_RCC_GetSysClkSource>
 8002426:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002428:	f7ff feed 	bl	8002206 <LL_RCC_PLL_GetMainSource>
 800242c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x168>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d10d      	bne.n	8002456 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d10a      	bne.n	8002456 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	f7ff fc04 	bl	8001c4c <LL_RCC_HSE_IsReady>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d045      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1fe>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d141      	bne.n	80024d6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e295      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d102      	bne.n	8002466 <HAL_RCC_OscConfig+0x18e>
 8002460:	f7ff fbd6 	bl	8001c10 <LL_RCC_HSE_Enable>
 8002464:	e00d      	b.n	8002482 <HAL_RCC_OscConfig+0x1aa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246e:	d104      	bne.n	800247a <HAL_RCC_OscConfig+0x1a2>
 8002470:	f7ff fbb0 	bl	8001bd4 <LL_RCC_HSE_EnableBypass>
 8002474:	f7ff fbcc 	bl	8001c10 <LL_RCC_HSE_Enable>
 8002478:	e003      	b.n	8002482 <HAL_RCC_OscConfig+0x1aa>
 800247a:	f7ff fbd8 	bl	8001c2e <LL_RCC_HSE_Disable>
 800247e:	f7ff fbb8 	bl	8001bf2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe feff 	bl	800128c <HAL_GetTick>
 800248e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002492:	f7fe fefb 	bl	800128c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e26e      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024a4:	f7ff fbd2 	bl	8001c4c <LL_RCC_HSE_IsReady>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f1      	beq.n	8002492 <HAL_RCC_OscConfig+0x1ba>
 80024ae:	e013      	b.n	80024d8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe feec 	bl	800128c <HAL_GetTick>
 80024b4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fee8 	bl	800128c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e25b      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024ca:	f7ff fbbf 	bl	8001c4c <LL_RCC_HSE_IsReady>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f1      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1e0>
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d051      	beq.n	8002588 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e4:	f7ff fd93 	bl	800200e <LL_RCC_GetSysClkSource>
 80024e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ea:	f7ff fe8c 	bl	8002206 <LL_RCC_PLL_GetMainSource>
 80024ee:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x22a>
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d113      	bne.n	8002524 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d110      	bne.n	8002524 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	f7ff fbd3 	bl	8001cac <LL_RCC_HSI_IsReady>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x240>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e234      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fbd7 	bl	8001cd0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002522:	e031      	b.n	8002588 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d019      	beq.n	8002560 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	f7ff fba0 	bl	8001c70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe feac 	bl	800128c <HAL_GetTick>
 8002534:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fea8 	bl	800128c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e21b      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800254a:	f7ff fbaf 	bl	8001cac <LL_RCC_HSI_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f1      	beq.n	8002538 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fbb9 	bl	8001cd0 <LL_RCC_HSI_SetCalibTrimming>
 800255e:	e013      	b.n	8002588 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002560:	f7ff fb95 	bl	8001c8e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fe92 	bl	800128c <HAL_GetTick>
 8002568:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe fe8e 	bl	800128c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e201      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800257e:	f7ff fb95 	bl	8001cac <LL_RCC_HSI_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f1      	bne.n	800256c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d075      	beq.n	8002696 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d046      	beq.n	8002644 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80025b6:	f7ff fc4c 	bl	8001e52 <LL_RCC_LSI1_IsReady>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d113      	bne.n	80025e8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025c0:	f7ff fc25 	bl	8001e0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c4:	f7fe fe62 	bl	800128c <HAL_GetTick>
 80025c8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025cc:	f7fe fe5e 	bl	800128c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1d1      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025de:	f7ff fc38 	bl	8001e52 <LL_RCC_LSI1_IsReady>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f1      	beq.n	80025cc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025e8:	f7ff fc45 	bl	8001e76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe4e 	bl	800128c <HAL_GetTick>
 80025f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025f4:	f7fe fe4a 	bl	800128c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1bd      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002606:	f7ff fc58 	bl	8001eba <LL_RCC_LSI2_IsReady>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f1      	beq.n	80025f4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fc62 	bl	8001ede <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800261a:	f7ff fc09 	bl	8001e30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fe35 	bl	800128c <HAL_GetTick>
 8002622:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002626:	f7fe fe31 	bl	800128c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a4      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002638:	f7ff fc0b 	bl	8001e52 <LL_RCC_LSI1_IsReady>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f1      	bne.n	8002626 <HAL_RCC_OscConfig+0x34e>
 8002642:	e050      	b.n	80026e6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002644:	f7ff fbe3 	bl	8001e0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fe20 	bl	800128c <HAL_GetTick>
 800264c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002650:	f7fe fe1c 	bl	800128c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d904      	bls.n	8002668 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e18f      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002668:	f7ff fbf3 	bl	8001e52 <LL_RCC_LSI1_IsReady>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ee      	beq.n	8002650 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002672:	f7ff fc11 	bl	8001e98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002678:	f7fe fe08 	bl	800128c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b03      	cmp	r3, #3
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e17b      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800268a:	f7ff fc16 	bl	8001eba <LL_RCC_LSI2_IsReady>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f1      	bne.n	8002678 <HAL_RCC_OscConfig+0x3a0>
 8002694:	e027      	b.n	80026e6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002696:	f7ff fbff 	bl	8001e98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fdf7 	bl	800128c <HAL_GetTick>
 800269e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026a2:	f7fe fdf3 	bl	800128c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e166      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026b4:	f7ff fc01 	bl	8001eba <LL_RCC_LSI2_IsReady>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f1      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026be:	f7ff fbb7 	bl	8001e30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe fde3 	bl	800128c <HAL_GetTick>
 80026c6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026ca:	f7fe fddf 	bl	800128c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e152      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026dc:	f7ff fbb9 	bl	8001e52 <LL_RCC_LSI1_IsReady>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f1      	bne.n	80026ca <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d05b      	beq.n	80027aa <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	4ba6      	ldr	r3, [pc, #664]	; (800298c <HAL_RCC_OscConfig+0x6b4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d114      	bne.n	8002728 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026fe:	f7ff fa39 	bl	8001b74 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe fdc3 	bl	800128c <HAL_GetTick>
 8002706:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe fdbf 	bl	800128c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e132      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	4b9b      	ldr	r3, [pc, #620]	; (800298c <HAL_RCC_OscConfig+0x6b4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0x45e>
 8002730:	f7ff fb17 	bl	8001d62 <LL_RCC_LSE_Enable>
 8002734:	e00c      	b.n	8002750 <HAL_RCC_OscConfig+0x478>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d104      	bne.n	8002748 <HAL_RCC_OscConfig+0x470>
 800273e:	f7ff fb32 	bl	8001da6 <LL_RCC_LSE_EnableBypass>
 8002742:	f7ff fb0e 	bl	8001d62 <LL_RCC_LSE_Enable>
 8002746:	e003      	b.n	8002750 <HAL_RCC_OscConfig+0x478>
 8002748:	f7ff fb1c 	bl	8001d84 <LL_RCC_LSE_Disable>
 800274c:	f7ff fb3c 	bl	8001dc8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d014      	beq.n	8002782 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fd98 	bl	800128c <HAL_GetTick>
 800275c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fd94 	bl	800128c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e105      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002776:	f7ff fb38 	bl	8001dea <LL_RCC_LSE_IsReady>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCC_OscConfig+0x488>
 8002780:	e013      	b.n	80027aa <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fd83 	bl	800128c <HAL_GetTick>
 8002786:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fd7f 	bl	800128c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0f0      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80027a0:	f7ff fb23 	bl	8001dea <LL_RCC_LSE_IsReady>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02c      	beq.n	8002810 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d014      	beq.n	80027e8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027be:	f7ff fa9c 	bl	8001cfa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fd63 	bl	800128c <HAL_GetTick>
 80027c6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ca:	f7fe fd5f 	bl	800128c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0d2      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027dc:	f7ff faaf 	bl	8001d3e <LL_RCC_HSI48_IsReady>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f1      	beq.n	80027ca <HAL_RCC_OscConfig+0x4f2>
 80027e6:	e013      	b.n	8002810 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e8:	f7ff fa98 	bl	8001d1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe fd4e 	bl	800128c <HAL_GetTick>
 80027f0:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7fe fd4a 	bl	800128c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0bd      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002806:	f7ff fa9a 	bl	8001d3e <LL_RCC_HSI48_IsReady>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f1      	bne.n	80027f4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b3 	beq.w	8002980 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281a:	f7ff fbf8 	bl	800200e <LL_RCC_GetSysClkSource>
 800281e:	4603      	mov	r3, r0
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d076      	beq.n	8002912 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	2b02      	cmp	r3, #2
 800282a:	d14b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	f7ff fca5 	bl	800217a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fd2c 	bl	800128c <HAL_GetTick>
 8002834:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fd28 	bl	800128c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e09b      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800284a:	f7ff fca5 	bl	8002198 <LL_RCC_PLL_IsReady>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f1      	bne.n	8002838 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_RCC_OscConfig+0x6b8>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	0212      	lsls	r2, r2, #8
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800287a:	4311      	orrs	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002880:	430a      	orrs	r2, r1
 8002882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288a:	f7ff fc67 	bl	800215c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fcf5 	bl	800128c <HAL_GetTick>
 80028a2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fcf1 	bl	800128c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e064      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80028b8:	f7ff fc6e 	bl	8002198 <LL_RCC_PLL_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f1      	beq.n	80028a6 <HAL_RCC_OscConfig+0x5ce>
 80028c2:	e05d      	b.n	8002980 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c4:	f7ff fc59 	bl	800217a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fcce 	bl	800128c <HAL_GetTick>
 80028f0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fcca 	bl	800128c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e03d      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002906:	f7ff fc47 	bl	8002198 <LL_RCC_PLL_IsReady>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f1      	bne.n	80028f4 <HAL_RCC_OscConfig+0x61c>
 8002910:	e036      	b.n	8002980 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e031      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	429a      	cmp	r2, r3
 8002932:	d123      	bne.n	800297c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d114      	bne.n	800297c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d10d      	bne.n	800297c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	372c      	adds	r7, #44	; 0x2c
 8002986:	46bd      	mov	sp, r7
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	bf00      	nop
 800298c:	58000400 	.word	0x58000400
 8002990:	11c1808c 	.word	0x11c1808c

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e12a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b97      	ldr	r3, [pc, #604]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d91b      	bls.n	80029ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	4992      	ldr	r1, [pc, #584]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c6:	f7fe fc61 	bl	800128c <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029ce:	f7fe fc5d 	bl	800128c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e10e      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e0:	4b89      	ldr	r3, [pc, #548]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d1ef      	bne.n	80029ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fb11 	bl	8002026 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fc42 	bl	800128c <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a0c:	f7fe fc3e 	bl	800128c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0ef      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a1e:	f7ff fbfe 	bl	800221e <LL_RCC_IsActiveFlag_HPRE>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f1      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fb08 	bl	800204e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fc25 	bl	800128c <HAL_GetTick>
 8002a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a46:	f7fe fc21 	bl	800128c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0d2      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a58:	f7ff fbf3 	bl	8002242 <LL_RCC_IsActiveFlag_C2HPRE>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f1      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fb01 	bl	800207a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fc08 	bl	800128c <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a80:	f7fe fc04 	bl	800128c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0b5      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a92:	f7ff fbe9 	bl	8002268 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f1      	beq.n	8002a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fafb 	bl	80020a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fbeb 	bl	800128c <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aba:	f7fe fbe7 	bl	800128c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e098      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002acc:	f7ff fbdf 	bl	800228e <LL_RCC_IsActiveFlag_PPRE1>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f1      	beq.n	8002aba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d017      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff faf1 	bl	80020d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fbcd 	bl	800128c <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002af6:	f7fe fbc9 	bl	800128c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e07a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b08:	f7ff fbd3 	bl	80022b2 <LL_RCC_IsActiveFlag_PPRE2>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f1      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d043      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b26:	f7ff f891 	bl	8001c4c <LL_RCC_HSE_IsReady>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11e      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e064      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b3c:	f7ff fb2c 	bl	8002198 <LL_RCC_PLL_IsReady>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e059      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b52:	f7ff f9f9 	bl	8001f48 <LL_RCC_MSI_IsReady>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04e      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b60:	f7ff f8a4 	bl	8001cac <LL_RCC_HSI_IsReady>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e047      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fa37 	bl	8001fe6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fb88 	bl	800128c <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fb84 	bl	800128c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e033      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	f7ff fa3a 	bl	800200e <LL_RCC_GetSysClkSource>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d1ec      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d21b      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	4912      	ldr	r1, [pc, #72]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fb62 	bl	800128c <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bcc:	f7fe fb5e 	bl	800128c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e00f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ef      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002bec:	f7fe fa08 	bl	8001000 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002bf0:	f7fe fb58 	bl	80012a4 <HAL_GetTickPrio>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fafc 	bl	80011f4 <HAL_InitTick>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	58004000 	.word	0x58004000

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	f7ff f9fc 	bl	800200e <LL_RCC_GetSysClkSource>
 8002c16:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c1e:	f7ff f9b8 	bl	8001f92 <LL_RCC_MSI_GetRange>
 8002c22:	4603      	mov	r3, r0
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e04b      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c3a:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e045      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d10a      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c46:	f7fe ffb3 	bl	8001bb0 <LL_RCC_HSE_IsEnabledDiv2>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e03a      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e037      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c5c:	f7ff fad3 	bl	8002206 <LL_RCC_PLL_GetMainSource>
 8002c60:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d003      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x64>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x6a>
 8002c6e:	e00d      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c72:	60bb      	str	r3, [r7, #8]
        break;
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c76:	f7fe ff9b 	bl	8001bb0 <LL_RCC_HSE_IsEnabledDiv2>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c82:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c84:	e00d      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c88:	60bb      	str	r3, [r7, #8]
        break;
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c8c:	f7ff f981 	bl	8001f92 <LL_RCC_MSI_GetRange>
 8002c90:	4603      	mov	r3, r0
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	60bb      	str	r3, [r7, #8]
        break;
 8002ca0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002ca2:	f7ff fa8b 	bl	80021bc <LL_RCC_PLL_GetN>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	fb03 f402 	mul.w	r4, r3, r2
 8002cae:	f7ff fa9e 	bl	80021ee <LL_RCC_PLL_GetDivider>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	fbb4 f4f3 	udiv	r4, r4, r3
 8002cbc:	f7ff fa8b 	bl	80021d6 <LL_RCC_PLL_GetR>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	0f5b      	lsrs	r3, r3, #29
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	08059bb8 	.word	0x08059bb8
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	01e84800 	.word	0x01e84800

08002ce4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b598      	push	{r3, r4, r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ce8:	f7ff ff90 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002cec:	4604      	mov	r4, r0
 8002cee:	f7ff fa03 	bl	80020f8 <LL_RCC_GetAHBPrescaler>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x24>)
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd98      	pop	{r3, r4, r7, pc}
 8002d08:	08059b58 	.word	0x08059b58

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b598      	push	{r3, r4, r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d10:	f7ff ffe8 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d14:	4604      	mov	r4, r0
 8002d16:	f7ff fa09 	bl	800212c <LL_RCC_GetAPB1Prescaler>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd98      	pop	{r3, r4, r7, pc}
 8002d34:	08059b98 	.word	0x08059b98

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b598      	push	{r3, r4, r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d3c:	f7ff ffd2 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d40:	4604      	mov	r4, r0
 8002d42:	f7ff f9ff 	bl	8002144 <LL_RCC_GetAPB2Prescaler>
 8002d46:	4603      	mov	r3, r0
 8002d48:	0adb      	lsrs	r3, r3, #11
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd98      	pop	{r3, r4, r7, pc}
 8002d60:	08059b98 	.word	0x08059b98

08002d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d70:	d903      	bls.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e007      	b.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d8a:	f7ff f9c1 	bl	8002110 <LL_RCC_GetAHB4Prescaler>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	0c9c      	lsrs	r4, r3, #18
 8002dae:	f7fe fef1 	bl	8001b94 <HAL_PWREx_GetVoltageRange>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4619      	mov	r1, r3
 8002db6:	4620      	mov	r0, r4
 8002db8:	f000 f80c 	bl	8002dd4 <RCC_SetFlashLatency>
 8002dbc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08059bb8 	.word	0x08059bb8
 8002dcc:	08059b58 	.word	0x08059b58
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b093      	sub	sp, #76	; 0x4c
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <RCC_SetFlashLatency+0xf0>)
 8002de0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002dea:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <RCC_SetFlashLatency+0xf4>)
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002df6:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <RCC_SetFlashLatency+0xf8>)
 8002df8:	f107 040c 	add.w	r4, r7, #12
 8002dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e02:	2300      	movs	r3, #0
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0c:	d11c      	bne.n	8002e48 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	e015      	b.n	8002e40 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d808      	bhi.n	8002e3a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e30:	4413      	add	r3, r2
 8002e32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e38:	e022      	b.n	8002e80 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d9e6      	bls.n	8002e14 <RCC_SetFlashLatency+0x40>
 8002e46:	e01b      	b.n	8002e80 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4c:	e015      	b.n	8002e7a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e56:	4413      	add	r3, r2
 8002e58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d808      	bhi.n	8002e74 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e72:	e005      	b.n	8002e80 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	3301      	adds	r3, #1
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d9e6      	bls.n	8002e4e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <RCC_SetFlashLatency+0xfc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0207 	bic.w	r2, r3, #7
 8002e88:	4911      	ldr	r1, [pc, #68]	; (8002ed0 <RCC_SetFlashLatency+0xfc>)
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e90:	f7fe f9fc 	bl	800128c <HAL_GetTick>
 8002e94:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e96:	e008      	b.n	8002eaa <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e98:	f7fe f9f8 	bl	800128c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e007      	b.n	8002eba <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <RCC_SetFlashLatency+0xfc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ef      	bne.n	8002e98 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	374c      	adds	r7, #76	; 0x4c
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	080054d4 	.word	0x080054d4
 8002ec8:	080054e4 	.word	0x080054e4
 8002ecc:	080054f0 	.word	0x080054f0
 8002ed0:	58004000 	.word	0x58004000

08002ed4 <LL_RCC_LSE_IsEnabled>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <LL_RCC_LSE_IsEnabled+0x18>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <LL_RCC_LSE_IsEnabled+0x1a>
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_LSE_IsReady>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d101      	bne.n	8002f10 <LL_RCC_LSE_IsReady+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_RCC_LSE_IsReady+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_MSI_EnablePLLMode>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetRFWKPClockSource>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_SetSMPSClockSource>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_SetSMPSPrescaler>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RCC_SetUSARTClockSource>:
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_SetLPUARTClockSource>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_RCC_SetI2CClockSource>:
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003026:	43db      	mvns	r3, r3
 8003028:	401a      	ands	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_RCC_SetLPTIMClockSource>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_RCC_SetSAIClockSource>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_RCC_SetRNGClockSource>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_RCC_SetCLK48ClockSource>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_RCC_SetUSBClockSource>:
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffe3 	bl	80030d4 <LL_RCC_SetCLK48ClockSource>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <LL_RCC_SetADCClockSource>:
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800312a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_SetRTCClockSource>:
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_RCC_GetRTCClockSource>:
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_ForceBackupDomainReset>:
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_ReleaseBackupDomainReset>:
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_PLLSAI1_Enable>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_PLLSAI1_Disable>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_RCC_PLLSAI1_IsReady>:
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321a:	d101      	bne.n	8003220 <LL_RCC_PLLSAI1_IsReady+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003238:	2300      	movs	r3, #0
 800323a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d034      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003250:	d021      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003256:	d81b      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800325c:	d01d      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800325e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003262:	d815      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326c:	d110      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800327e:	e00d      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f94d 	bl	8003524 <RCCEx_PLLSAI1_ConfigNP>
 800328a:	4603      	mov	r3, r0
 800328c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77fb      	strb	r3, [r7, #31]
        break;
 8003294:	e002      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800329a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329c:	7ffb      	ldrb	r3, [r7, #31]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fee8 	bl	800307c <LL_RCC_SetSAIClockSource>
 80032ac:	e001      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	7ffb      	ldrb	r3, [r7, #31]
 80032b0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d046      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032be:	f7ff ff56 	bl	800316e <LL_RCC_GetRTCClockSource>
 80032c2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d03c      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032ce:	f7fe fc51 	bl	8001b74 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff30 	bl	8003142 <LL_RCC_SetRTCClockSource>
 80032e2:	e02e      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80032ee:	f7ff ff4b 	bl	8003188 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80032f2:	f7ff ff5a 	bl	80031aa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800330e:	f7ff fde1 	bl	8002ed4 <LL_RCC_LSE_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d114      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003318:	f7fd ffb8 	bl	800128c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800331e:	e00b      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fd ffb4 	bl	800128c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d902      	bls.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	77fb      	strb	r3, [r7, #31]
              break;
 8003336:	e004      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003338:	f7ff fdde 	bl	8002ef8 <LL_RCC_LSE_IsReady>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d1ee      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	77bb      	strb	r3, [r7, #30]
 8003346:	e001      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fe2a 	bl	8002fb6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe35 	bl	8002fe2 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe5d 	bl	8003048 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe52 	bl	8003048 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe2a 	bl	800300e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe1f 	bl	800300e <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d022      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fe8d 	bl	8003100 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ee:	d107      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003408:	d10b      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f8e3 	bl	80035da <RCCEx_PLLSAI1_ConfigNQ>
 8003414:	4603      	mov	r3, r0
 8003416:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02b      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003436:	d008      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003440:	d003      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fe2a 	bl	80030a8 <LL_RCC_SetRNGClockSource>
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fe21 	bl	80030a8 <LL_RCC_SetRNGClockSource>
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff fe34 	bl	80030d4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003474:	d107      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003484:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d022      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fe3d 	bl	8003116 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a4:	d107      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f8e3 	bl	8003690 <RCCEx_PLLSAI1_ConfigNR>
 80034ca:	4603      	mov	r3, r0
 80034cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fd26 	bl	8002f3a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fd45 	bl	8002f8e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fd2c 	bl	8002f66 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800350e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800351c:	f7ff fcfe 	bl	8002f1c <LL_RCC_MSI_EnablePLLMode>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003530:	f7ff fe5b 	bl	80031ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003534:	f7fd feaa 	bl	800128c <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fd fea6 	bl	800128c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
      break;
 800354e:	e004      	b.n	800355a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003550:	f7ff fe5a 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d137      	bne.n	80035d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358a:	4313      	orrs	r3, r2
 800358c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800358e:	f7ff fe1d 	bl	80031cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003592:	f7fd fe7b 	bl	800128c <HAL_GetTick>
 8003596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003598:	e009      	b.n	80035ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800359a:	f7fd fe77 	bl	800128c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d902      	bls.n	80035ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	73fb      	strb	r3, [r7, #15]
        break;
 80035ac:	e004      	b.n	80035b8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035ae:	f7ff fe2b 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d1f0      	bne.n	800359a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035cc:	4313      	orrs	r3, r2
 80035ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035e6:	f7ff fe00 	bl	80031ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035ea:	f7fd fe4f 	bl	800128c <HAL_GetTick>
 80035ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035f0:	e009      	b.n	8003606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f2:	f7fd fe4b 	bl	800128c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e004      	b.n	8003610 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003606:	f7ff fdff 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d137      	bne.n	8003686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003640:	4313      	orrs	r3, r2
 8003642:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003644:	f7ff fdc2 	bl	80031cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd fe20 	bl	800128c <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fd fe1c 	bl	800128c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
        break;
 8003662:	e004      	b.n	800366e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003664:	f7ff fdd0 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d1f0      	bne.n	8003650 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d108      	bne.n	8003686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003682:	4313      	orrs	r3, r2
 8003684:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800369c:	f7ff fda5 	bl	80031ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036a0:	f7fd fdf4 	bl	800128c <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036a6:	e009      	b.n	80036bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a8:	f7fd fdf0 	bl	800128c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d902      	bls.n	80036bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ba:	e004      	b.n	80036c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036bc:	f7ff fda4 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d137      	bne.n	800373c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e0:	4313      	orrs	r3, r2
 80036e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036fa:	f7ff fd67 	bl	80031cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fe:	f7fd fdc5 	bl	800128c <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003704:	e009      	b.n	800371a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003706:	f7fd fdc1 	bl	800128c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d902      	bls.n	800371a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	73fb      	strb	r3, [r7, #15]
        break;
 8003718:	e004      	b.n	8003724 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800371a:	f7ff fd75 	bl	8003208 <LL_RCC_PLLSAI1_IsReady>
 800371e:	4603      	mov	r3, r0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d1f0      	bne.n	8003706 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e07c      	b.n	8003852 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd faea 	bl	8000d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003798:	d902      	bls.n	80037a0 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e002      	b.n	80037a6 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037ae:	d007      	beq.n	80037c0 <HAL_SPI_Init+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d0:	d903      	bls.n	80037da <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
 80037d8:	e002      	b.n	80037e0 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 0204 	and.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	ea42 0103 	orr.w	r1, r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_SPI_Transmit+0x22>
 8003878:	2302      	movs	r3, #2
 800387a:	e150      	b.n	8003b1e <HAL_SPI_Transmit+0x2c4>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003884:	f7fd fd02 	bl	800128c <HAL_GetTick>
 8003888:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800389e:	e135      	b.n	8003b0c <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Transmit+0x52>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038b0:	e12c      	b.n	8003b0c <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	d107      	bne.n	800390e <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d007      	beq.n	800392c <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003934:	d94b      	bls.n	80039ce <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Transmit+0xea>
 800393e:	8afb      	ldrh	r3, [r7, #22]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d13e      	bne.n	80039c2 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003968:	e02b      	b.n	80039c2 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d112      	bne.n	800399e <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800399c:	e011      	b.n	80039c2 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399e:	f7fd fc75 	bl	800128c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d803      	bhi.n	80039b6 <HAL_SPI_Transmit+0x15c>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d102      	bne.n	80039bc <HAL_SPI_Transmit+0x162>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039c0:	e0a4      	b.n	8003b0c <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ce      	bne.n	800396a <HAL_SPI_Transmit+0x110>
 80039cc:	e07c      	b.n	8003ac8 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_Transmit+0x182>
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d170      	bne.n	8003abe <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d912      	bls.n	8003a0c <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	881a      	ldrh	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	1c9a      	adds	r2, r3, #2
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b02      	subs	r3, #2
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0a:	e058      	b.n	8003abe <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	7812      	ldrb	r2, [r2, #0]
 8003a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a32:	e044      	b.n	8003abe <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d12b      	bne.n	8003a9a <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d912      	bls.n	8003a72 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	1c9a      	adds	r2, r3, #2
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b02      	subs	r3, #2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a70:	e025      	b.n	8003abe <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a98:	e011      	b.n	8003abe <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9a:	f7fd fbf7 	bl	800128c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d803      	bhi.n	8003ab2 <HAL_SPI_Transmit+0x258>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x25e>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003abc:	e026      	b.n	8003b0c <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1b5      	bne.n	8003a34 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f901 	bl	8003cd4 <SPI_EndRxTxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e000      	b.n	8003b0c <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003b0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b36:	e04c      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d048      	beq.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b40:	f7fd fba4 	bl	800128c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d902      	bls.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d13d      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d111      	bne.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	d004      	beq.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d107      	bne.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d10f      	bne.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00f      	b.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1a3      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c08:	e057      	b.n	8003cba <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c10:	d106      	bne.n	8003c20 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d048      	beq.n	8003cba <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c28:	f7fd fb30 	bl	800128c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d902      	bls.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0x44>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d13d      	bne.n	8003cba <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d111      	bne.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	d004      	beq.n	8003c6c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6a:	d107      	bne.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	d10f      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e008      	b.n	8003ccc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d19f      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff ff84 	bl	8003bfa <SPI_WaitFifoStateUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e027      	b.n	8003d58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff07 	bl	8003b26 <SPI_WaitFlagStateUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e014      	b.n	8003d58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff ff5d 	bl	8003bfa <SPI_WaitFifoStateUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e000      	b.n	8003d58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <LL_RCC_GetUSARTClockSource>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4013      	ands	r3, r2
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_GetLPUARTClockSource>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4013      	ands	r3, r2
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e042      	b.n	8003e38 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fd f837 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2224      	movs	r2, #36	; 0x24
 8003dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f82c 	bl	8003e40 <UART_SetConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e022      	b.n	8003e38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f001 f850 	bl	8004ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f001 f8d7 	bl	8004fe4 <UART_CheckIdleState>
 8003e36:	4603      	mov	r3, r0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e44:	b08c      	sub	sp, #48	; 0x30
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e76:	4313      	orrs	r3, r2
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4ba6      	ldr	r3, [pc, #664]	; (800411c <UART_SetConfig+0x2dc>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a9c      	ldr	r2, [pc, #624]	; (8004120 <UART_SetConfig+0x2e0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ec8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f023 010f 	bic.w	r1, r3, #15
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a8c      	ldr	r2, [pc, #560]	; (8004124 <UART_SetConfig+0x2e4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d124      	bne.n	8003f40 <UART_SetConfig+0x100>
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	f7ff ff32 	bl	8003d60 <LL_RCC_GetUSARTClockSource>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d81a      	bhi.n	8003f38 <UART_SetConfig+0xf8>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0xc8>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f29 	.word	0x08003f29
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e042      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e03e      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e03a      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e036      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	e032      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a76      	ldr	r2, [pc, #472]	; (8004120 <UART_SetConfig+0x2e0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12a      	bne.n	8003fa0 <UART_SetConfig+0x160>
 8003f4a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f4e:	f7ff ff17 	bl	8003d80 <LL_RCC_GetLPUARTClockSource>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0x150>
 8003f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0x158>
 8003f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f64:	d00c      	beq.n	8003f80 <UART_SetConfig+0x140>
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6a:	d815      	bhi.n	8003f98 <UART_SetConfig+0x158>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <UART_SetConfig+0x138>
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d008      	beq.n	8003f88 <UART_SetConfig+0x148>
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x158>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	e012      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f86:	e00e      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	e00a      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e006      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9e:	e002      	b.n	8003fa6 <UART_SetConfig+0x166>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5d      	ldr	r2, [pc, #372]	; (8004120 <UART_SetConfig+0x2e0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	f040 841d 	bne.w	80047ec <UART_SetConfig+0x9ac>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	f200 815d 	bhi.w	8004276 <UART_SetConfig+0x436>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x184>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08004277 	.word	0x08004277
 8003fcc:	0800408b 	.word	0x0800408b
 8003fd0:	08004277 	.word	0x08004277
 8003fd4:	08004135 	.word	0x08004135
 8003fd8:	08004277 	.word	0x08004277
 8003fdc:	08004277 	.word	0x08004277
 8003fe0:	08004277 	.word	0x08004277
 8003fe4:	080041d7 	.word	0x080041d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fe8:	f7fe fe90 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <UART_SetConfig+0x240>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d03e      	beq.n	800407c <UART_SetConfig+0x23c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b02      	cmp	r3, #2
 8004004:	d038      	beq.n	8004078 <UART_SetConfig+0x238>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b03      	cmp	r3, #3
 800400c:	d032      	beq.n	8004074 <UART_SetConfig+0x234>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b04      	cmp	r3, #4
 8004014:	d02c      	beq.n	8004070 <UART_SetConfig+0x230>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b05      	cmp	r3, #5
 800401c:	d026      	beq.n	800406c <UART_SetConfig+0x22c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b06      	cmp	r3, #6
 8004024:	d020      	beq.n	8004068 <UART_SetConfig+0x228>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b07      	cmp	r3, #7
 800402c:	d01a      	beq.n	8004064 <UART_SetConfig+0x224>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b08      	cmp	r3, #8
 8004034:	d014      	beq.n	8004060 <UART_SetConfig+0x220>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b09      	cmp	r3, #9
 800403c:	d00e      	beq.n	800405c <UART_SetConfig+0x21c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b0a      	cmp	r3, #10
 8004044:	d008      	beq.n	8004058 <UART_SetConfig+0x218>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b0b      	cmp	r3, #11
 800404c:	d102      	bne.n	8004054 <UART_SetConfig+0x214>
 800404e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004052:	e016      	b.n	8004082 <UART_SetConfig+0x242>
 8004054:	2301      	movs	r3, #1
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x242>
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	e012      	b.n	8004082 <UART_SetConfig+0x242>
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x242>
 8004060:	2320      	movs	r3, #32
 8004062:	e00e      	b.n	8004082 <UART_SetConfig+0x242>
 8004064:	2310      	movs	r3, #16
 8004066:	e00c      	b.n	8004082 <UART_SetConfig+0x242>
 8004068:	230c      	movs	r3, #12
 800406a:	e00a      	b.n	8004082 <UART_SetConfig+0x242>
 800406c:	230a      	movs	r3, #10
 800406e:	e008      	b.n	8004082 <UART_SetConfig+0x242>
 8004070:	2308      	movs	r3, #8
 8004072:	e006      	b.n	8004082 <UART_SetConfig+0x242>
 8004074:	2306      	movs	r3, #6
 8004076:	e004      	b.n	8004082 <UART_SetConfig+0x242>
 8004078:	2304      	movs	r3, #4
 800407a:	e002      	b.n	8004082 <UART_SetConfig+0x242>
 800407c:	2302      	movs	r3, #2
 800407e:	e000      	b.n	8004082 <UART_SetConfig+0x242>
 8004080:	2301      	movs	r3, #1
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e0f9      	b.n	800427e <UART_SetConfig+0x43e>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d04a      	beq.n	8004128 <UART_SetConfig+0x2e8>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b01      	cmp	r3, #1
 8004098:	d03e      	beq.n	8004118 <UART_SetConfig+0x2d8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d038      	beq.n	8004114 <UART_SetConfig+0x2d4>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d032      	beq.n	8004110 <UART_SetConfig+0x2d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d02c      	beq.n	800410c <UART_SetConfig+0x2cc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d026      	beq.n	8004108 <UART_SetConfig+0x2c8>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d020      	beq.n	8004104 <UART_SetConfig+0x2c4>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d01a      	beq.n	8004100 <UART_SetConfig+0x2c0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d014      	beq.n	80040fc <UART_SetConfig+0x2bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	d00e      	beq.n	80040f8 <UART_SetConfig+0x2b8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b0a      	cmp	r3, #10
 80040e0:	d008      	beq.n	80040f4 <UART_SetConfig+0x2b4>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b0b      	cmp	r3, #11
 80040e8:	d102      	bne.n	80040f0 <UART_SetConfig+0x2b0>
 80040ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ee:	e01c      	b.n	800412a <UART_SetConfig+0x2ea>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e01a      	b.n	800412a <UART_SetConfig+0x2ea>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	e018      	b.n	800412a <UART_SetConfig+0x2ea>
 80040f8:	2340      	movs	r3, #64	; 0x40
 80040fa:	e016      	b.n	800412a <UART_SetConfig+0x2ea>
 80040fc:	2320      	movs	r3, #32
 80040fe:	e014      	b.n	800412a <UART_SetConfig+0x2ea>
 8004100:	2310      	movs	r3, #16
 8004102:	e012      	b.n	800412a <UART_SetConfig+0x2ea>
 8004104:	230c      	movs	r3, #12
 8004106:	e010      	b.n	800412a <UART_SetConfig+0x2ea>
 8004108:	230a      	movs	r3, #10
 800410a:	e00e      	b.n	800412a <UART_SetConfig+0x2ea>
 800410c:	2308      	movs	r3, #8
 800410e:	e00c      	b.n	800412a <UART_SetConfig+0x2ea>
 8004110:	2306      	movs	r3, #6
 8004112:	e00a      	b.n	800412a <UART_SetConfig+0x2ea>
 8004114:	2304      	movs	r3, #4
 8004116:	e008      	b.n	800412a <UART_SetConfig+0x2ea>
 8004118:	2302      	movs	r3, #2
 800411a:	e006      	b.n	800412a <UART_SetConfig+0x2ea>
 800411c:	cfff69f3 	.word	0xcfff69f3
 8004120:	40008000 	.word	0x40008000
 8004124:	40013800 	.word	0x40013800
 8004128:	2301      	movs	r3, #1
 800412a:	4aa7      	ldr	r2, [pc, #668]	; (80043c8 <UART_SetConfig+0x588>)
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	61fb      	str	r3, [r7, #28]
        break;
 8004132:	e0a4      	b.n	800427e <UART_SetConfig+0x43e>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004134:	f7fe fd6a 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <UART_SetConfig+0x38c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b01      	cmp	r3, #1
 8004148:	d03e      	beq.n	80041c8 <UART_SetConfig+0x388>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b02      	cmp	r3, #2
 8004150:	d038      	beq.n	80041c4 <UART_SetConfig+0x384>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b03      	cmp	r3, #3
 8004158:	d032      	beq.n	80041c0 <UART_SetConfig+0x380>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b04      	cmp	r3, #4
 8004160:	d02c      	beq.n	80041bc <UART_SetConfig+0x37c>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b05      	cmp	r3, #5
 8004168:	d026      	beq.n	80041b8 <UART_SetConfig+0x378>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b06      	cmp	r3, #6
 8004170:	d020      	beq.n	80041b4 <UART_SetConfig+0x374>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b07      	cmp	r3, #7
 8004178:	d01a      	beq.n	80041b0 <UART_SetConfig+0x370>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b08      	cmp	r3, #8
 8004180:	d014      	beq.n	80041ac <UART_SetConfig+0x36c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b09      	cmp	r3, #9
 8004188:	d00e      	beq.n	80041a8 <UART_SetConfig+0x368>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b0a      	cmp	r3, #10
 8004190:	d008      	beq.n	80041a4 <UART_SetConfig+0x364>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b0b      	cmp	r3, #11
 8004198:	d102      	bne.n	80041a0 <UART_SetConfig+0x360>
 800419a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800419e:	e016      	b.n	80041ce <UART_SetConfig+0x38e>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e014      	b.n	80041ce <UART_SetConfig+0x38e>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	e012      	b.n	80041ce <UART_SetConfig+0x38e>
 80041a8:	2340      	movs	r3, #64	; 0x40
 80041aa:	e010      	b.n	80041ce <UART_SetConfig+0x38e>
 80041ac:	2320      	movs	r3, #32
 80041ae:	e00e      	b.n	80041ce <UART_SetConfig+0x38e>
 80041b0:	2310      	movs	r3, #16
 80041b2:	e00c      	b.n	80041ce <UART_SetConfig+0x38e>
 80041b4:	230c      	movs	r3, #12
 80041b6:	e00a      	b.n	80041ce <UART_SetConfig+0x38e>
 80041b8:	230a      	movs	r3, #10
 80041ba:	e008      	b.n	80041ce <UART_SetConfig+0x38e>
 80041bc:	2308      	movs	r3, #8
 80041be:	e006      	b.n	80041ce <UART_SetConfig+0x38e>
 80041c0:	2306      	movs	r3, #6
 80041c2:	e004      	b.n	80041ce <UART_SetConfig+0x38e>
 80041c4:	2304      	movs	r3, #4
 80041c6:	e002      	b.n	80041ce <UART_SetConfig+0x38e>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e000      	b.n	80041ce <UART_SetConfig+0x38e>
 80041cc:	2301      	movs	r3, #1
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
        break;
 80041d4:	e053      	b.n	800427e <UART_SetConfig+0x43e>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d044      	beq.n	8004268 <UART_SetConfig+0x428>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d03e      	beq.n	8004264 <UART_SetConfig+0x424>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d038      	beq.n	8004260 <UART_SetConfig+0x420>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d032      	beq.n	800425c <UART_SetConfig+0x41c>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d02c      	beq.n	8004258 <UART_SetConfig+0x418>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b05      	cmp	r3, #5
 8004204:	d026      	beq.n	8004254 <UART_SetConfig+0x414>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b06      	cmp	r3, #6
 800420c:	d020      	beq.n	8004250 <UART_SetConfig+0x410>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b07      	cmp	r3, #7
 8004214:	d01a      	beq.n	800424c <UART_SetConfig+0x40c>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b08      	cmp	r3, #8
 800421c:	d014      	beq.n	8004248 <UART_SetConfig+0x408>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b09      	cmp	r3, #9
 8004224:	d00e      	beq.n	8004244 <UART_SetConfig+0x404>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d008      	beq.n	8004240 <UART_SetConfig+0x400>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b0b      	cmp	r3, #11
 8004234:	d102      	bne.n	800423c <UART_SetConfig+0x3fc>
 8004236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423a:	e016      	b.n	800426a <UART_SetConfig+0x42a>
 800423c:	2301      	movs	r3, #1
 800423e:	e014      	b.n	800426a <UART_SetConfig+0x42a>
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	e012      	b.n	800426a <UART_SetConfig+0x42a>
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	e010      	b.n	800426a <UART_SetConfig+0x42a>
 8004248:	2320      	movs	r3, #32
 800424a:	e00e      	b.n	800426a <UART_SetConfig+0x42a>
 800424c:	2310      	movs	r3, #16
 800424e:	e00c      	b.n	800426a <UART_SetConfig+0x42a>
 8004250:	230c      	movs	r3, #12
 8004252:	e00a      	b.n	800426a <UART_SetConfig+0x42a>
 8004254:	230a      	movs	r3, #10
 8004256:	e008      	b.n	800426a <UART_SetConfig+0x42a>
 8004258:	2308      	movs	r3, #8
 800425a:	e006      	b.n	800426a <UART_SetConfig+0x42a>
 800425c:	2306      	movs	r3, #6
 800425e:	e004      	b.n	800426a <UART_SetConfig+0x42a>
 8004260:	2304      	movs	r3, #4
 8004262:	e002      	b.n	800426a <UART_SetConfig+0x42a>
 8004264:	2302      	movs	r3, #2
 8004266:	e000      	b.n	800426a <UART_SetConfig+0x42a>
 8004268:	2301      	movs	r3, #1
 800426a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	61fb      	str	r3, [r7, #28]
        break;
 8004274:	e003      	b.n	800427e <UART_SetConfig+0x43e>
      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800427c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 85f5 	beq.w	8004e70 <UART_SetConfig+0x1030>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	429a      	cmp	r2, r3
 8004294:	d305      	bcc.n	80042a2 <UART_SetConfig+0x462>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d904      	bls.n	80042ac <UART_SetConfig+0x46c>
      {
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a8:	f000 bde2 	b.w	8004e70 <UART_SetConfig+0x1030>
      }
      else
      {
        switch (clocksource)
 80042ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 8284 	bhi.w	80047be <UART_SetConfig+0x97e>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x47c>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080047bf 	.word	0x080047bf
 80042c4:	08004421 	.word	0x08004421
 80042c8:	080047bf 	.word	0x080047bf
 80042cc:	08004553 	.word	0x08004553
 80042d0:	080047bf 	.word	0x080047bf
 80042d4:	080047bf 	.word	0x080047bf
 80042d8:	080047bf 	.word	0x080047bf
 80042dc:	0800468d 	.word	0x0800468d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fd14 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d06a      	beq.n	80043cc <UART_SetConfig+0x58c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d05e      	beq.n	80043bc <UART_SetConfig+0x57c>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b02      	cmp	r3, #2
 8004304:	d055      	beq.n	80043b2 <UART_SetConfig+0x572>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b03      	cmp	r3, #3
 800430c:	d04c      	beq.n	80043a8 <UART_SetConfig+0x568>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b04      	cmp	r3, #4
 8004314:	d043      	beq.n	800439e <UART_SetConfig+0x55e>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b05      	cmp	r3, #5
 800431c:	d03a      	beq.n	8004394 <UART_SetConfig+0x554>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b06      	cmp	r3, #6
 8004324:	d031      	beq.n	800438a <UART_SetConfig+0x54a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b07      	cmp	r3, #7
 800432c:	d028      	beq.n	8004380 <UART_SetConfig+0x540>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b08      	cmp	r3, #8
 8004334:	d01f      	beq.n	8004376 <UART_SetConfig+0x536>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b09      	cmp	r3, #9
 800433c:	d016      	beq.n	800436c <UART_SetConfig+0x52c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b0a      	cmp	r3, #10
 8004344:	d00d      	beq.n	8004362 <UART_SetConfig+0x522>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b0b      	cmp	r3, #11
 800434c:	d104      	bne.n	8004358 <UART_SetConfig+0x518>
 800434e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e03d      	b.n	80043d4 <UART_SetConfig+0x594>
 8004358:	f04f 0201 	mov.w	r2, #1
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e038      	b.n	80043d4 <UART_SetConfig+0x594>
 8004362:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	e033      	b.n	80043d4 <UART_SetConfig+0x594>
 800436c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e02e      	b.n	80043d4 <UART_SetConfig+0x594>
 8004376:	f04f 0220 	mov.w	r2, #32
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e029      	b.n	80043d4 <UART_SetConfig+0x594>
 8004380:	f04f 0210 	mov.w	r2, #16
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e024      	b.n	80043d4 <UART_SetConfig+0x594>
 800438a:	f04f 020c 	mov.w	r2, #12
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e01f      	b.n	80043d4 <UART_SetConfig+0x594>
 8004394:	f04f 020a 	mov.w	r2, #10
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e01a      	b.n	80043d4 <UART_SetConfig+0x594>
 800439e:	f04f 0208 	mov.w	r2, #8
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e015      	b.n	80043d4 <UART_SetConfig+0x594>
 80043a8:	f04f 0206 	mov.w	r2, #6
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x594>
 80043b2:	f04f 0204 	mov.w	r2, #4
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x594>
 80043bc:	f04f 0202 	mov.w	r2, #2
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e006      	b.n	80043d4 <UART_SetConfig+0x594>
 80043c6:	bf00      	nop
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	f04f 0201 	mov.w	r2, #1
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f7fb fed2 	bl	800017c <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	020b      	lsls	r3, r1, #8
 80043ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ee:	0202      	lsls	r2, r0, #8
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	6849      	ldr	r1, [r1, #4]
 80043f4:	0849      	lsrs	r1, r1, #1
 80043f6:	4608      	mov	r0, r1
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	1814      	adds	r4, r2, r0
 80043fe:	603c      	str	r4, [r7, #0]
 8004400:	414b      	adcs	r3, r1
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004412:	f7fb feb3 	bl	800017c <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4613      	mov	r3, r2
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800441e:	e1d2      	b.n	80047c6 <UART_SetConfig+0x986>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d067      	beq.n	80044f8 <UART_SetConfig+0x6b8>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b01      	cmp	r3, #1
 800442e:	d05e      	beq.n	80044ee <UART_SetConfig+0x6ae>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b02      	cmp	r3, #2
 8004436:	d055      	beq.n	80044e4 <UART_SetConfig+0x6a4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b03      	cmp	r3, #3
 800443e:	d04c      	beq.n	80044da <UART_SetConfig+0x69a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b04      	cmp	r3, #4
 8004446:	d043      	beq.n	80044d0 <UART_SetConfig+0x690>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b05      	cmp	r3, #5
 800444e:	d03a      	beq.n	80044c6 <UART_SetConfig+0x686>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b06      	cmp	r3, #6
 8004456:	d031      	beq.n	80044bc <UART_SetConfig+0x67c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b07      	cmp	r3, #7
 800445e:	d028      	beq.n	80044b2 <UART_SetConfig+0x672>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b08      	cmp	r3, #8
 8004466:	d01f      	beq.n	80044a8 <UART_SetConfig+0x668>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b09      	cmp	r3, #9
 800446e:	d016      	beq.n	800449e <UART_SetConfig+0x65e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b0a      	cmp	r3, #10
 8004476:	d00d      	beq.n	8004494 <UART_SetConfig+0x654>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b0b      	cmp	r3, #11
 800447e:	d104      	bne.n	800448a <UART_SetConfig+0x64a>
 8004480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e03a      	b.n	8004500 <UART_SetConfig+0x6c0>
 800448a:	f04f 0201 	mov.w	r2, #1
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e035      	b.n	8004500 <UART_SetConfig+0x6c0>
 8004494:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e030      	b.n	8004500 <UART_SetConfig+0x6c0>
 800449e:	f04f 0240 	mov.w	r2, #64	; 0x40
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e02b      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044a8:	f04f 0220 	mov.w	r2, #32
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e026      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044b2:	f04f 0210 	mov.w	r2, #16
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e021      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044bc:	f04f 020c 	mov.w	r2, #12
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e01c      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044c6:	f04f 020a 	mov.w	r2, #10
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e017      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044d0:	f04f 0208 	mov.w	r2, #8
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e012      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044da:	f04f 0206 	mov.w	r2, #6
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e00d      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044e4:	f04f 0204 	mov.w	r2, #4
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044ee:	f04f 0202 	mov.w	r2, #2
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e003      	b.n	8004500 <UART_SetConfig+0x6c0>
 80044f8:	f04f 0201 	mov.w	r2, #1
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	48b9      	ldr	r0, [pc, #740]	; (80047e8 <UART_SetConfig+0x9a8>)
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	f7fb fe39 	bl	800017c <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	020b      	lsls	r3, r1, #8
 800451c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004520:	0202      	lsls	r2, r0, #8
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	6849      	ldr	r1, [r1, #4]
 8004526:	0849      	lsrs	r1, r1, #1
 8004528:	4608      	mov	r0, r1
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	eb12 0a00 	adds.w	sl, r2, r0
 8004532:	eb43 0b01 	adc.w	fp, r3, r1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	461a      	mov	r2, r3
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	4650      	mov	r0, sl
 8004542:	4659      	mov	r1, fp
 8004544:	f7fb fe1a 	bl	800017c <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004550:	e139      	b.n	80047c6 <UART_SetConfig+0x986>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fb5b 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8004556:	61b8      	str	r0, [r7, #24]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4618      	mov	r0, r3
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d067      	beq.n	8004638 <UART_SetConfig+0x7f8>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b01      	cmp	r3, #1
 800456e:	d05e      	beq.n	800462e <UART_SetConfig+0x7ee>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b02      	cmp	r3, #2
 8004576:	d055      	beq.n	8004624 <UART_SetConfig+0x7e4>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b03      	cmp	r3, #3
 800457e:	d04c      	beq.n	800461a <UART_SetConfig+0x7da>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b04      	cmp	r3, #4
 8004586:	d043      	beq.n	8004610 <UART_SetConfig+0x7d0>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b05      	cmp	r3, #5
 800458e:	d03a      	beq.n	8004606 <UART_SetConfig+0x7c6>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b06      	cmp	r3, #6
 8004596:	d031      	beq.n	80045fc <UART_SetConfig+0x7bc>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b07      	cmp	r3, #7
 800459e:	d028      	beq.n	80045f2 <UART_SetConfig+0x7b2>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d01f      	beq.n	80045e8 <UART_SetConfig+0x7a8>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	d016      	beq.n	80045de <UART_SetConfig+0x79e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2b0a      	cmp	r3, #10
 80045b6:	d00d      	beq.n	80045d4 <UART_SetConfig+0x794>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b0b      	cmp	r3, #11
 80045be:	d104      	bne.n	80045ca <UART_SetConfig+0x78a>
 80045c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e03a      	b.n	8004640 <UART_SetConfig+0x800>
 80045ca:	f04f 0201 	mov.w	r2, #1
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e035      	b.n	8004640 <UART_SetConfig+0x800>
 80045d4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e030      	b.n	8004640 <UART_SetConfig+0x800>
 80045de:	f04f 0240 	mov.w	r2, #64	; 0x40
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e02b      	b.n	8004640 <UART_SetConfig+0x800>
 80045e8:	f04f 0220 	mov.w	r2, #32
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e026      	b.n	8004640 <UART_SetConfig+0x800>
 80045f2:	f04f 0210 	mov.w	r2, #16
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e021      	b.n	8004640 <UART_SetConfig+0x800>
 80045fc:	f04f 020c 	mov.w	r2, #12
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e01c      	b.n	8004640 <UART_SetConfig+0x800>
 8004606:	f04f 020a 	mov.w	r2, #10
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e017      	b.n	8004640 <UART_SetConfig+0x800>
 8004610:	f04f 0208 	mov.w	r2, #8
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e012      	b.n	8004640 <UART_SetConfig+0x800>
 800461a:	f04f 0206 	mov.w	r2, #6
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e00d      	b.n	8004640 <UART_SetConfig+0x800>
 8004624:	f04f 0204 	mov.w	r2, #4
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e008      	b.n	8004640 <UART_SetConfig+0x800>
 800462e:	f04f 0202 	mov.w	r2, #2
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e003      	b.n	8004640 <UART_SetConfig+0x800>
 8004638:	f04f 0201 	mov.w	r2, #1
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	f7fb fd9c 	bl	800017c <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	020b      	lsls	r3, r1, #8
 8004656:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800465a:	0202      	lsls	r2, r0, #8
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	6849      	ldr	r1, [r1, #4]
 8004660:	0849      	lsrs	r1, r1, #1
 8004662:	4608      	mov	r0, r1
 8004664:	f04f 0100 	mov.w	r1, #0
 8004668:	eb12 0800 	adds.w	r8, r2, r0
 800466c:	eb43 0901 	adc.w	r9, r3, r1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	461a      	mov	r2, r3
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fb fd7d 	bl	800017c <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4613      	mov	r3, r2
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800468a:	e09c      	b.n	80047c6 <UART_SetConfig+0x986>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d067      	beq.n	8004764 <UART_SetConfig+0x924>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b01      	cmp	r3, #1
 800469a:	d05e      	beq.n	800475a <UART_SetConfig+0x91a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d055      	beq.n	8004750 <UART_SetConfig+0x910>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d04c      	beq.n	8004746 <UART_SetConfig+0x906>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d043      	beq.n	800473c <UART_SetConfig+0x8fc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d03a      	beq.n	8004732 <UART_SetConfig+0x8f2>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d031      	beq.n	8004728 <UART_SetConfig+0x8e8>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	d028      	beq.n	800471e <UART_SetConfig+0x8de>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d01f      	beq.n	8004714 <UART_SetConfig+0x8d4>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b09      	cmp	r3, #9
 80046da:	d016      	beq.n	800470a <UART_SetConfig+0x8ca>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b0a      	cmp	r3, #10
 80046e2:	d00d      	beq.n	8004700 <UART_SetConfig+0x8c0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b0b      	cmp	r3, #11
 80046ea:	d104      	bne.n	80046f6 <UART_SetConfig+0x8b6>
 80046ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e03a      	b.n	800476c <UART_SetConfig+0x92c>
 80046f6:	f04f 0201 	mov.w	r2, #1
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e035      	b.n	800476c <UART_SetConfig+0x92c>
 8004700:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e030      	b.n	800476c <UART_SetConfig+0x92c>
 800470a:	f04f 0240 	mov.w	r2, #64	; 0x40
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e02b      	b.n	800476c <UART_SetConfig+0x92c>
 8004714:	f04f 0220 	mov.w	r2, #32
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e026      	b.n	800476c <UART_SetConfig+0x92c>
 800471e:	f04f 0210 	mov.w	r2, #16
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e021      	b.n	800476c <UART_SetConfig+0x92c>
 8004728:	f04f 020c 	mov.w	r2, #12
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e01c      	b.n	800476c <UART_SetConfig+0x92c>
 8004732:	f04f 020a 	mov.w	r2, #10
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e017      	b.n	800476c <UART_SetConfig+0x92c>
 800473c:	f04f 0208 	mov.w	r2, #8
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e012      	b.n	800476c <UART_SetConfig+0x92c>
 8004746:	f04f 0206 	mov.w	r2, #6
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e00d      	b.n	800476c <UART_SetConfig+0x92c>
 8004750:	f04f 0204 	mov.w	r2, #4
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e008      	b.n	800476c <UART_SetConfig+0x92c>
 800475a:	f04f 0202 	mov.w	r2, #2
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e003      	b.n	800476c <UART_SetConfig+0x92c>
 8004764:	f04f 0201 	mov.w	r2, #1
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f7fb fd02 	bl	800017c <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	020b      	lsls	r3, r1, #8
 800478a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800478e:	0202      	lsls	r2, r0, #8
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	6849      	ldr	r1, [r1, #4]
 8004794:	0849      	lsrs	r1, r1, #1
 8004796:	4608      	mov	r0, r1
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	1814      	adds	r4, r2, r0
 800479e:	eb43 0501 	adc.w	r5, r3, r1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fce4 	bl	800017c <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047bc:	e003      	b.n	80047c6 <UART_SetConfig+0x986>
          default:
            ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 80047c4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047cc:	d308      	bcc.n	80047e0 <UART_SetConfig+0x9a0>
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d4:	d204      	bcs.n	80047e0 <UART_SetConfig+0x9a0>
        {
          huart->Instance->BRR = usartdiv;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e347      	b.n	8004e70 <UART_SetConfig+0x1030>
        }
        else
        {
          ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e343      	b.n	8004e70 <UART_SetConfig+0x1030>
 80047e8:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f4:	f040 81a7 	bne.w	8004b46 <UART_SetConfig+0xd06>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80047f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047fc:	3b01      	subs	r3, #1
 80047fe:	2b07      	cmp	r3, #7
 8004800:	f200 817f 	bhi.w	8004b02 <UART_SetConfig+0xcc2>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0x9cc>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800482d 	.word	0x0800482d
 8004810:	080048e5 	.word	0x080048e5
 8004814:	08004b03 	.word	0x08004b03
 8004818:	08004997 	.word	0x08004997
 800481c:	08004b03 	.word	0x08004b03
 8004820:	08004b03 	.word	0x08004b03
 8004824:	08004b03 	.word	0x08004b03
 8004828:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe fa84 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8004830:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <UART_SetConfig+0xa84>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b01      	cmp	r3, #1
 8004840:	d03e      	beq.n	80048c0 <UART_SetConfig+0xa80>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b02      	cmp	r3, #2
 8004848:	d038      	beq.n	80048bc <UART_SetConfig+0xa7c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b03      	cmp	r3, #3
 8004850:	d032      	beq.n	80048b8 <UART_SetConfig+0xa78>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b04      	cmp	r3, #4
 8004858:	d02c      	beq.n	80048b4 <UART_SetConfig+0xa74>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b05      	cmp	r3, #5
 8004860:	d026      	beq.n	80048b0 <UART_SetConfig+0xa70>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b06      	cmp	r3, #6
 8004868:	d020      	beq.n	80048ac <UART_SetConfig+0xa6c>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b07      	cmp	r3, #7
 8004870:	d01a      	beq.n	80048a8 <UART_SetConfig+0xa68>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b08      	cmp	r3, #8
 8004878:	d014      	beq.n	80048a4 <UART_SetConfig+0xa64>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b09      	cmp	r3, #9
 8004880:	d00e      	beq.n	80048a0 <UART_SetConfig+0xa60>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d008      	beq.n	800489c <UART_SetConfig+0xa5c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b0b      	cmp	r3, #11
 8004890:	d102      	bne.n	8004898 <UART_SetConfig+0xa58>
 8004892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004896:	e016      	b.n	80048c6 <UART_SetConfig+0xa86>
 8004898:	2301      	movs	r3, #1
 800489a:	e014      	b.n	80048c6 <UART_SetConfig+0xa86>
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	e012      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	e010      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048a4:	2320      	movs	r3, #32
 80048a6:	e00e      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048a8:	2310      	movs	r3, #16
 80048aa:	e00c      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048ac:	230c      	movs	r3, #12
 80048ae:	e00a      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048b0:	230a      	movs	r3, #10
 80048b2:	e008      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048b4:	2308      	movs	r3, #8
 80048b6:	e006      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048b8:	2306      	movs	r3, #6
 80048ba:	e004      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048bc:	2304      	movs	r3, #4
 80048be:	e002      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e000      	b.n	80048c6 <UART_SetConfig+0xa86>
 80048c4:	2301      	movs	r3, #1
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048e2:	e112      	b.n	8004b0a <UART_SetConfig+0xcca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d044      	beq.n	8004976 <UART_SetConfig+0xb36>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d03e      	beq.n	8004972 <UART_SetConfig+0xb32>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d038      	beq.n	800496e <UART_SetConfig+0xb2e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b03      	cmp	r3, #3
 8004902:	d032      	beq.n	800496a <UART_SetConfig+0xb2a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b04      	cmp	r3, #4
 800490a:	d02c      	beq.n	8004966 <UART_SetConfig+0xb26>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2b05      	cmp	r3, #5
 8004912:	d026      	beq.n	8004962 <UART_SetConfig+0xb22>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b06      	cmp	r3, #6
 800491a:	d020      	beq.n	800495e <UART_SetConfig+0xb1e>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b07      	cmp	r3, #7
 8004922:	d01a      	beq.n	800495a <UART_SetConfig+0xb1a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2b08      	cmp	r3, #8
 800492a:	d014      	beq.n	8004956 <UART_SetConfig+0xb16>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b09      	cmp	r3, #9
 8004932:	d00e      	beq.n	8004952 <UART_SetConfig+0xb12>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2b0a      	cmp	r3, #10
 800493a:	d008      	beq.n	800494e <UART_SetConfig+0xb0e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b0b      	cmp	r3, #11
 8004942:	d102      	bne.n	800494a <UART_SetConfig+0xb0a>
 8004944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004948:	e016      	b.n	8004978 <UART_SetConfig+0xb38>
 800494a:	2301      	movs	r3, #1
 800494c:	e014      	b.n	8004978 <UART_SetConfig+0xb38>
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	e012      	b.n	8004978 <UART_SetConfig+0xb38>
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	e010      	b.n	8004978 <UART_SetConfig+0xb38>
 8004956:	2320      	movs	r3, #32
 8004958:	e00e      	b.n	8004978 <UART_SetConfig+0xb38>
 800495a:	2310      	movs	r3, #16
 800495c:	e00c      	b.n	8004978 <UART_SetConfig+0xb38>
 800495e:	230c      	movs	r3, #12
 8004960:	e00a      	b.n	8004978 <UART_SetConfig+0xb38>
 8004962:	230a      	movs	r3, #10
 8004964:	e008      	b.n	8004978 <UART_SetConfig+0xb38>
 8004966:	2308      	movs	r3, #8
 8004968:	e006      	b.n	8004978 <UART_SetConfig+0xb38>
 800496a:	2306      	movs	r3, #6
 800496c:	e004      	b.n	8004978 <UART_SetConfig+0xb38>
 800496e:	2304      	movs	r3, #4
 8004970:	e002      	b.n	8004978 <UART_SetConfig+0xb38>
 8004972:	2302      	movs	r3, #2
 8004974:	e000      	b.n	8004978 <UART_SetConfig+0xb38>
 8004976:	2301      	movs	r3, #1
 8004978:	4aa0      	ldr	r2, [pc, #640]	; (8004bfc <UART_SetConfig+0xdbc>)
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	b29b      	uxth	r3, r3
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004994:	e0b9      	b.n	8004b0a <UART_SetConfig+0xcca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe f939 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 800499a:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d044      	beq.n	8004a2e <UART_SetConfig+0xbee>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d03e      	beq.n	8004a2a <UART_SetConfig+0xbea>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d038      	beq.n	8004a26 <UART_SetConfig+0xbe6>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d032      	beq.n	8004a22 <UART_SetConfig+0xbe2>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d02c      	beq.n	8004a1e <UART_SetConfig+0xbde>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d026      	beq.n	8004a1a <UART_SetConfig+0xbda>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d020      	beq.n	8004a16 <UART_SetConfig+0xbd6>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b07      	cmp	r3, #7
 80049da:	d01a      	beq.n	8004a12 <UART_SetConfig+0xbd2>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d014      	beq.n	8004a0e <UART_SetConfig+0xbce>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d00e      	beq.n	8004a0a <UART_SetConfig+0xbca>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2b0a      	cmp	r3, #10
 80049f2:	d008      	beq.n	8004a06 <UART_SetConfig+0xbc6>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b0b      	cmp	r3, #11
 80049fa:	d102      	bne.n	8004a02 <UART_SetConfig+0xbc2>
 80049fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a00:	e016      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e014      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	e012      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	e010      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a0e:	2320      	movs	r3, #32
 8004a10:	e00e      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a12:	2310      	movs	r3, #16
 8004a14:	e00c      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a16:	230c      	movs	r3, #12
 8004a18:	e00a      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a1a:	230a      	movs	r3, #10
 8004a1c:	e008      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	e006      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e004      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a26:	2304      	movs	r3, #4
 8004a28:	e002      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e000      	b.n	8004a30 <UART_SetConfig+0xbf0>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	005a      	lsls	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	441a      	add	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a4c:	e05d      	b.n	8004b0a <UART_SetConfig+0xcca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d044      	beq.n	8004ae0 <UART_SetConfig+0xca0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d03e      	beq.n	8004adc <UART_SetConfig+0xc9c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d038      	beq.n	8004ad8 <UART_SetConfig+0xc98>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d032      	beq.n	8004ad4 <UART_SetConfig+0xc94>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d02c      	beq.n	8004ad0 <UART_SetConfig+0xc90>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d026      	beq.n	8004acc <UART_SetConfig+0xc8c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d020      	beq.n	8004ac8 <UART_SetConfig+0xc88>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b07      	cmp	r3, #7
 8004a8c:	d01a      	beq.n	8004ac4 <UART_SetConfig+0xc84>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d014      	beq.n	8004ac0 <UART_SetConfig+0xc80>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	d00e      	beq.n	8004abc <UART_SetConfig+0xc7c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b0a      	cmp	r3, #10
 8004aa4:	d008      	beq.n	8004ab8 <UART_SetConfig+0xc78>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b0b      	cmp	r3, #11
 8004aac:	d102      	bne.n	8004ab4 <UART_SetConfig+0xc74>
 8004aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab2:	e016      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e014      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	e012      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	e010      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e00e      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	e00c      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	e00a      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004acc:	230a      	movs	r3, #10
 8004ace:	e008      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	e006      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ad4:	2306      	movs	r3, #6
 8004ad6:	e004      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e002      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e000      	b.n	8004ae2 <UART_SetConfig+0xca2>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	005a      	lsls	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b00:	e003      	b.n	8004b0a <UART_SetConfig+0xcca>
      default:
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8004b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b0f      	cmp	r3, #15
 8004b0e:	d916      	bls.n	8004b3e <UART_SetConfig+0xcfe>
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d212      	bcs.n	8004b3e <UART_SetConfig+0xcfe>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f023 030f 	bic.w	r3, r3, #15
 8004b20:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	8afb      	ldrh	r3, [r7, #22]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	8afa      	ldrh	r2, [r7, #22]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	e198      	b.n	8004e70 <UART_SetConfig+0x1030>
    }
    else
    {
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b44:	e194      	b.n	8004e70 <UART_SetConfig+0x1030>
    }
  }
  else
  {
    switch (clocksource)
 8004b46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	f200 817c 	bhi.w	8004e4a <UART_SetConfig+0x100a>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0xd18>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004c33 	.word	0x08004c33
 8004b60:	08004e4b 	.word	0x08004e4b
 8004b64:	08004ce3 	.word	0x08004ce3
 8004b68:	08004e4b 	.word	0x08004e4b
 8004b6c:	08004e4b 	.word	0x08004e4b
 8004b70:	08004e4b 	.word	0x08004e4b
 8004b74:	08004d99 	.word	0x08004d99
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe f8de 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d046      	beq.n	8004c14 <UART_SetConfig+0xdd4>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d040      	beq.n	8004c10 <UART_SetConfig+0xdd0>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d03a      	beq.n	8004c0c <UART_SetConfig+0xdcc>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d034      	beq.n	8004c08 <UART_SetConfig+0xdc8>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d02e      	beq.n	8004c04 <UART_SetConfig+0xdc4>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d028      	beq.n	8004c00 <UART_SetConfig+0xdc0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d020      	beq.n	8004bf8 <UART_SetConfig+0xdb8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d01a      	beq.n	8004bf4 <UART_SetConfig+0xdb4>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d014      	beq.n	8004bf0 <UART_SetConfig+0xdb0>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d00e      	beq.n	8004bec <UART_SetConfig+0xdac>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b0a      	cmp	r3, #10
 8004bd4:	d008      	beq.n	8004be8 <UART_SetConfig+0xda8>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2b0b      	cmp	r3, #11
 8004bdc:	d102      	bne.n	8004be4 <UART_SetConfig+0xda4>
 8004bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004be2:	e018      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	e014      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004bec:	2340      	movs	r3, #64	; 0x40
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	e010      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	e00e      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	e00c      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	230a      	movs	r3, #10
 8004c02:	e008      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004c04:	2308      	movs	r3, #8
 8004c06:	e006      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004c08:	2306      	movs	r3, #6
 8004c0a:	e004      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e002      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e000      	b.n	8004c16 <UART_SetConfig+0xdd6>
 8004c14:	2301      	movs	r3, #1
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c30:	e10f      	b.n	8004e52 <UART_SetConfig+0x1012>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d044      	beq.n	8004cc4 <UART_SetConfig+0xe84>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d03e      	beq.n	8004cc0 <UART_SetConfig+0xe80>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d038      	beq.n	8004cbc <UART_SetConfig+0xe7c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d032      	beq.n	8004cb8 <UART_SetConfig+0xe78>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d02c      	beq.n	8004cb4 <UART_SetConfig+0xe74>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d026      	beq.n	8004cb0 <UART_SetConfig+0xe70>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d020      	beq.n	8004cac <UART_SetConfig+0xe6c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b07      	cmp	r3, #7
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0xe68>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d014      	beq.n	8004ca4 <UART_SetConfig+0xe64>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d00e      	beq.n	8004ca0 <UART_SetConfig+0xe60>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b0a      	cmp	r3, #10
 8004c88:	d008      	beq.n	8004c9c <UART_SetConfig+0xe5c>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b0b      	cmp	r3, #11
 8004c90:	d102      	bne.n	8004c98 <UART_SetConfig+0xe58>
 8004c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e014      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004ca0:	2340      	movs	r3, #64	; 0x40
 8004ca2:	e010      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e00e      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	e00c      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cac:	230c      	movs	r3, #12
 8004cae:	e00a      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cb0:	230a      	movs	r3, #10
 8004cb2:	e008      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	e006      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cb8:	2306      	movs	r3, #6
 8004cba:	e004      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	e002      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e000      	b.n	8004cc6 <UART_SetConfig+0xe86>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <UART_SetConfig+0x105c>)
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ce0:	e0b7      	b.n	8004e52 <UART_SetConfig+0x1012>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fd ff93 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8004ce6:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d044      	beq.n	8004d7a <UART_SetConfig+0xf3a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d03e      	beq.n	8004d76 <UART_SetConfig+0xf36>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d038      	beq.n	8004d72 <UART_SetConfig+0xf32>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d032      	beq.n	8004d6e <UART_SetConfig+0xf2e>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d02c      	beq.n	8004d6a <UART_SetConfig+0xf2a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d026      	beq.n	8004d66 <UART_SetConfig+0xf26>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d020      	beq.n	8004d62 <UART_SetConfig+0xf22>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b07      	cmp	r3, #7
 8004d26:	d01a      	beq.n	8004d5e <UART_SetConfig+0xf1e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d014      	beq.n	8004d5a <UART_SetConfig+0xf1a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d00e      	beq.n	8004d56 <UART_SetConfig+0xf16>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b0a      	cmp	r3, #10
 8004d3e:	d008      	beq.n	8004d52 <UART_SetConfig+0xf12>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b0b      	cmp	r3, #11
 8004d46:	d102      	bne.n	8004d4e <UART_SetConfig+0xf0e>
 8004d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4c:	e016      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e014      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	e012      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	e010      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	e00e      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	e00c      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d62:	230c      	movs	r3, #12
 8004d64:	e00a      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d66:	230a      	movs	r3, #10
 8004d68:	e008      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	e006      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d6e:	2306      	movs	r3, #6
 8004d70:	e004      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d72:	2304      	movs	r3, #4
 8004d74:	e002      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e000      	b.n	8004d7c <UART_SetConfig+0xf3c>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d96:	e05c      	b.n	8004e52 <UART_SetConfig+0x1012>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d044      	beq.n	8004e2a <UART_SetConfig+0xfea>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d03e      	beq.n	8004e26 <UART_SetConfig+0xfe6>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d038      	beq.n	8004e22 <UART_SetConfig+0xfe2>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d032      	beq.n	8004e1e <UART_SetConfig+0xfde>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d02c      	beq.n	8004e1a <UART_SetConfig+0xfda>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d026      	beq.n	8004e16 <UART_SetConfig+0xfd6>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d020      	beq.n	8004e12 <UART_SetConfig+0xfd2>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b07      	cmp	r3, #7
 8004dd6:	d01a      	beq.n	8004e0e <UART_SetConfig+0xfce>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d014      	beq.n	8004e0a <UART_SetConfig+0xfca>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	d00e      	beq.n	8004e06 <UART_SetConfig+0xfc6>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b0a      	cmp	r3, #10
 8004dee:	d008      	beq.n	8004e02 <UART_SetConfig+0xfc2>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b0b      	cmp	r3, #11
 8004df6:	d102      	bne.n	8004dfe <UART_SetConfig+0xfbe>
 8004df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfc:	e016      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e014      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	e012      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	e010      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	e00e      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e0e:	2310      	movs	r3, #16
 8004e10:	e00c      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e12:	230c      	movs	r3, #12
 8004e14:	e00a      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e16:	230a      	movs	r3, #10
 8004e18:	e008      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	e006      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e1e:	2306      	movs	r3, #6
 8004e20:	e004      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e22:	2304      	movs	r3, #4
 8004e24:	e002      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e000      	b.n	8004e2c <UART_SetConfig+0xfec>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e48:	e003      	b.n	8004e52 <UART_SetConfig+0x1012>
      default:
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8004e50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d908      	bls.n	8004e6a <UART_SetConfig+0x102a>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d204      	bcs.n	8004e6a <UART_SetConfig+0x102a>
    {
      huart->Instance->BRR = usartdiv;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	e002      	b.n	8004e70 <UART_SetConfig+0x1030>
    }
    else
    {
      ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	; 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9a:	bf00      	nop
 8004e9c:	00f42400 	.word	0x00f42400

08004ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9e:	d10a      	bne.n	8004fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ff4:	f7fc f94a 	bl	800128c <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d10e      	bne.n	8005026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f82c 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e022      	b.n	800506c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d10e      	bne.n	8005052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f816 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e00c      	b.n	800506c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	e062      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d05e      	beq.n	800514c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fc f8fd 	bl	800128c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e045      	b.n	800516c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02e      	beq.n	800514c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fc:	d126      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005106:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005116:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e00f      	b.n	800516c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	429a      	cmp	r2, r3
 8005168:	d08d      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UARTEx_DisableFifoMode+0x16>
 8005186:	2302      	movs	r3, #2
 8005188:	e027      	b.n	80051da <HAL_UARTEx_DisableFifoMode+0x66>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e02d      	b.n	800525a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2224      	movs	r2, #36	; 0x24
 800520a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f850 	bl	80052e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005276:	2302      	movs	r3, #2
 8005278:	e02d      	b.n	80052d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2224      	movs	r2, #36	; 0x24
 8005286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f812 	bl	80052e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80052e8:	4a2f      	ldr	r2, [pc, #188]	; (80053a8 <UARTEx_SetNbDataToProcess+0xc8>)
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80052f6:	4a2d      	ldr	r2, [pc, #180]	; (80053ac <UARTEx_SetNbDataToProcess+0xcc>)
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005300:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800531c:	e03d      	b.n	800539a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800531e:	2308      	movs	r3, #8
 8005320:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005322:	2308      	movs	r3, #8
 8005324:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	0e5b      	lsrs	r3, r3, #25
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	0f5b      	lsrs	r3, r3, #29
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005346:	7fbb      	ldrb	r3, [r7, #30]
 8005348:	7f3a      	ldrb	r2, [r7, #28]
 800534a:	f107 0120 	add.w	r1, r7, #32
 800534e:	440a      	add	r2, r1
 8005350:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	7f3a      	ldrb	r2, [r7, #28]
 800535a:	f107 0120 	add.w	r1, r7, #32
 800535e:	440a      	add	r2, r1
 8005360:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005364:	fb93 f3f2 	sdiv	r3, r3, r2
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005370:	7ffb      	ldrb	r3, [r7, #31]
 8005372:	7f7a      	ldrb	r2, [r7, #29]
 8005374:	f107 0120 	add.w	r1, r7, #32
 8005378:	440a      	add	r2, r1
 800537a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	7f7a      	ldrb	r2, [r7, #29]
 8005384:	f107 0120 	add.w	r1, r7, #32
 8005388:	440a      	add	r2, r1
 800538a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800538e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800539a:	bf00      	nop
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	08005500 	.word	0x08005500
 80053ac:	08005508 	.word	0x08005508

080053b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053ec:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	b21b      	sxth	r3, r3
 8005400:	4013      	ands	r3, r2
 8005402:	b21b      	sxth	r3, r3
 8005404:	b29a      	uxth	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800541a:	b084      	sub	sp, #16
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	f107 0014 	add.w	r0, r7, #20
 8005428:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ffaf 	bl	80053b0 <USB_EnableGlobalInt>

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800545e:	b004      	add	sp, #16
 8005460:	4770      	bx	lr
	...

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 f820 	bl	80054bc <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08059c00 	.word	0x08059c00
 80054a0:	08059c00 	.word	0x08059c00
 80054a4:	08059c00 	.word	0x08059c00
 80054a8:	08059c04 	.word	0x08059c04

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <_init>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr

080054c8 <_fini>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr
